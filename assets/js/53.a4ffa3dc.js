(window.webpackJsonp=window.webpackJsonp||[]).push([[53],{278:function(a,t,s){"use strict";s.r(t);var e=s(2),r=Object(e.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h3",{attrs:{id:"_1-构建多模块项目-a-里面的子项目-b"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-构建多模块项目-a-里面的子项目-b","aria-hidden":"true"}},[a._v("#")]),a._v(" 1.构建多模块项目 A 里面的子项目 B")]),a._v(" "),s("ul",[s("li",[s("p",[s("code",[a._v("mvn package")]),a._v("当我真的想要时，是否必须为整个项目层次结构运行"),s("code",[a._v("B")]),a._v("，多模块慢")])]),a._v(" "),s("li",[s("p",[a._v("每次打包时都必须将A的快照安装到本地存储库中"),s("code",[a._v("B")]),a._v("吗")])]),a._v(" "),s("li",[s("p",[s("code",[a._v("mvn install -pl :B -am")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("-pl, --projects\n        Build specified reactor projects instead of all projects\n-am, --also-make\n        If project list is specified, also build projects required by the list\n")])])]),s("p",[a._v("因此，只需"),s("code",[a._v("cd")]),a._v("进入父P目录并运行：")]),a._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[a._v("mvn "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("install")]),a._v(" -pl B -am\n")])])]),s("p",[a._v("这将构建B以及B所需的模块。")]),a._v(" "),s("p",[a._v("请注意，如果引用"),s("code",[a._v("artifactId")]),a._v("的目录名称与目录名称不同，则需要使用冒号：")]),a._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[a._v("mvn\n")])])])])]),a._v(" "),s("h3",{attrs:{id:"_2-使用命令上传jar包"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-使用命令上传jar包","aria-hidden":"true"}},[a._v("#")]),a._v(" 2.使用命令上传jar包")]),a._v(" "),s("p",[a._v("maven 的 setting 文件要配置好对应的私服地址，执行命令的目录要在有pom的地方，同时注意文件的路径会相应抓换为相对路径。")]),a._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[a._v("mvn deploy:deploy-file \n-DgroupId"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("com.xxx\n-DartifactId"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("base-common \n-Dversion"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1.0")]),a._v(".0-SNAPSHOT \n-Dpackaging"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("jar -Dfile"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("D:/base-common-1.0.0-SNAPSHOT.Jar \n-Durl"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("http://192.168.13.51:8081/repository/my_snapshot \n-DrepositoryId"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("my_snapshot\n")])])]),s("h3",{attrs:{id:"_3-maven-指定配置文件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-maven-指定配置文件","aria-hidden":"true"}},[a._v("#")]),a._v(" 3.maven 指定配置文件")]),a._v(" "),s("p",[s("code",[a._v("-s,--settings")])]),a._v(" "),s("p",[s("code",[a._v("-gs,--global-settings")])]),a._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[a._v("mvn -gs /data/maven/setting.xml clean\nmvn gs /data/maven/setting.xml clean\n")])])]),s("h3",{attrs:{id:"依赖原则"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#依赖原则","aria-hidden":"true"}},[a._v("#")]),a._v(" 依赖原则")]),a._v(" "),s("ol",[s("li",[a._v("依赖路径最短优先原则")])]),a._v(" "),s("div",{staticClass:"language-html extra-class"},[s("pre",{pre:!0,attrs:{class:"language-html"}},[s("code",[a._v("A -> B -> C -> X(1.0)\nA -> D -> X(2.0)\n")])])]),s("p",[a._v("由于 X(2.0) 路径最短，所以使用 X(2.0)。")]),a._v(" "),s("ol",{attrs:{start:"2"}},[s("li",[a._v("声明顺序优先原则")])]),a._v(" "),s("div",{staticClass:"language-html extra-class"},[s("pre",{pre:!0,attrs:{class:"language-html"}},[s("code",[a._v("A -> B -> X(1.0)\nA -> C -> X(2.0)\n")])])]),s("p",[a._v("在 POM 中最先声明的优先，上面的两个依赖如果先声明 B，那么最后使用 X(1.0)。")]),a._v(" "),s("ol",{attrs:{start:"3"}},[s("li",[a._v("覆写优先原则")])]),a._v(" "),s("p",[a._v("子 POM 内声明的依赖优先于父 POM 中声明的依赖。")]),a._v(" "),s("h4",{attrs:{id:"依赖传递"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#依赖传递","aria-hidden":"true"}},[a._v("#")]),a._v(" 依赖传递")]),a._v(" "),s("p",[a._v("项目之间有依赖引用，可以使用 "),s("code",[a._v("<optional>true</optional>")]),a._v("显式说明该依赖不用传递下去，适用于直接依赖关系或者使用 "),s("code",[a._v("<dependencies>")]),a._v(" 进行依赖管理直接添加使用。")]),a._v(" "),s("div",{staticClass:"warning custom-block"},[s("p",[a._v("模块关系为继承 parent 时，"),s("code",[a._v("<optional>")]),a._v(" 设置")])]),a._v(" "),s("h4",{attrs:{id:"解决依赖冲突"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#解决依赖冲突","aria-hidden":"true"}},[a._v("#")]),a._v(" 解决依赖冲突")]),a._v(" "),s("p",[a._v("找到 Maven 加载的 Jar 包版本，使用 "),s("code",[a._v("mvn dependency:tree")]),a._v(" 查看依赖树，根据依赖原则来调整依赖在 POM 文件的声明顺序。")])])}),[],!1,null,null,null);t.default=r.exports}}]);