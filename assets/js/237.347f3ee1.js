(window.webpackJsonp=window.webpackJsonp||[]).push([[237],{462:function(t,s,a){"use strict";a.r(s);var e=a(2),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"_1-什么是反射机制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-什么是反射机制","aria-hidden":"true"}},[t._v("#")]),t._v(" .1.什么是反射机制")]),t._v(" "),a("blockquote",[a("p",[t._v("JAVA反射机制是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意一个方法；这种动态获取的信息以及动态调用对象的方法的功能称为java语言的反射机制。")])]),t._v(" "),a("h2",{attrs:{id:"_2-类加载的过程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-类加载的过程","aria-hidden":"true"}},[t._v("#")]),t._v(" 2.类加载的过程")]),t._v(" "),a("ul",[a("li",[t._v("JAVA中的类初始化分为三个步骤："),a("code",[t._v("加载")]),t._v("、"),a("code",[t._v("连接")]),t._v("、"),a("code",[t._v("初始化")]),t._v("。这三个步骤统称为类的加载或类初始化。")]),t._v(" "),a("li",[t._v("所谓类的加载是指将class文件读入内存，并为之创建一个java.lang."),a("code",[t._v("Class")]),t._v("对象，也就是所当程序使用任何类，都将会为之建立一个java.lang.Class对象。")])]),t._v(" "),a("p",[a("strong",[t._v("JAVA程序在运行期间可以动态加载、解析和使用一些在编译阶段并不确定的类型，这一机制被称为发射(Reflection)")]),t._v("， 反射机制提供的功能：\n1.在运行时判断任意一个对象所属的类。\n2.在运行时构造任意一个类的对象。\n3.在运行时判断任意一个类所具有的成员变量和方法。\n4.在运行时调用任意一个对象的方法")]),t._v(" "),a("h2",{attrs:{id:"_3、反射api"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3、反射api","aria-hidden":"true"}},[t._v("#")]),t._v(" 3、反射API")]),t._v(" "),a("ul",[a("li",[t._v("1.获取Class方法")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('\t\t//1.在一个对象被创建的情况下，获取Class方法\n\t\tDog dog=new Dog();\n\t\tClass clazz1 = dog.getClass();\n\t\t//2.在一个类被加载到内存中，但是还没有创建对象的情况下,获取Class方法\n\t\tClass clazz2=Dog.class;\n\t\t//3.在一个类还没有被加载情况下，获取Class的方法\n\t\tClass clazz3= Class.forName("Reflect.Dog");\n')])])]),a("ul",[a("li",[a("p",[t._v("2.创建对象")]),t._v(" "),a("p",[t._v("平常情况我们通过new Object来生成一个类的实例，但有时候我们没法直接new，只能通过反射动态生成。可以通过提供的newInstance()方法生成，或者调用类的构造函数。")])])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("Dog dogg = (Dog)clazz2.newInstance();\nDog dogg1 = (Dog)clazz1.getConstructor().newInstance();\n")])])]),a("ul",[a("li",[t._v("3.Method类")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('\t\t//返回一个包含某些 Method 对象的数组，这些对象反映此 Class 对象所表示的类或接口\n\t\tMethod[] methods = clazz1.getMethods();\n\t\t//返回一个 Method 对象，它反映此 Class 对象所表示的类或接口的指定公共成员方法\n\t\tMethod setName = clazz1.getMethod("setName", String.class);\n\t\t//包括公共、保护、默认（包）访问和私有方法，但不包括继承的方法。\n\t\tMethod[] declaredMethods = clazz1.getDeclaredMethods();\n\t\t//返回一个 Method 对象，该对象反映此 Class 对象所表示的类或接口的指定已声明方法\n\t\tMethod getName = clazz1.getDeclaredMethod("getName");\n\t\t\n')])])]),a("p",[t._v("简单来说：有 "),a("code",[t._v("Declared")]),t._v(" 的就是获取当前类的所有方法(包括"),a("code",[t._v("private")]),t._v("，"),a("code",[t._v("public")]),t._v("，"),a("code",[t._v("protect")]),t._v(")，没有的就获取自己已经继承的"),a("code",[t._v("public")]),t._v("方法。")]),t._v(" "),a("p",[t._v("方法的执行：\n"),a("code",[t._v('setName.invoke(dog, "我是小狗");')]),t._v("\nClass对象.invoke（执行对象，可变参数）；")]),t._v(" "),a("ul",[a("li",[t._v("4.Field类\n同理，这个是获取变量的。")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('\t\t//获取本类或者继承类的公有变量\n\t\tField[] fields = clazz3.getFields();\n\t\t//获取本类或者继承类的 某个 公有变量\n\t\tField field = clazz1.getField("xxx");\n\t\t//获取本类的全部公有私有变量\n\t\tField[] declaredFields = clazz1.getDeclaredFields();\n\t\t//获取本类的 某个 公有私有变量\n\t\tField declaredField = clazz1.getDeclaredField("num");\n')])])]),a("p",[t._v("设置值以及获取值")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("\t\t//设置值，私有的必须设置访问权限为可达\n        declaredField.setAccessible(true);\n\t\tdeclaredField.setInt(dog, 25);\n\t\t\t\t\t\t\t//获取值\n\t\tSystem.out.println(declaredField.get(dog));\n")])])]),a("p",[t._v("注意：这里设置值前提是变量的访问权限不能是"),a("code",[t._v("private")]),t._v("，否则会报错："),a("code",[t._v('Class Reflect.Reflect can not access a member of class Reflect.Dog with modifiers "private"')]),t._v("。私有的变量应该使用内部的setter 方法设置值。")]),t._v(" "),a("h2",{attrs:{id:"_4-获取私有属性值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-获取私有属性值","aria-hidden":"true"}},[t._v("#")]),t._v(" 4.获取私有属性值")]),t._v(" "),a("p",[t._v("有些时候，再一些开源项目中定义好的类，里面有我们需要的属性，但是没有直接的获取的方式，并且是私有的，可以通过反射进行获取。")]),t._v(" "),a("p",[t._v("示例：")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Dog")]),t._v(" dog"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Dog")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"dog"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Class")]),t._v(" clazz2"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Dog")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        \n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Field")]),t._v(" field "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" clazz2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getDeclaredField")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"name"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nfield"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setAccessible")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//必须")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" dogName "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" field"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("dog"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("dogName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("如果需要使用到类型判断")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Field")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" declaredFields1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" clazz2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getDeclaredFields")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Field")]),t._v(" field1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" declaredFields1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    field1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setAccessible")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Class")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" type "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" field1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getType")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Class 类型比较,包装类和基本数据类型")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" type "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" type"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Number")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("isAssignableFrom")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("type"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// isAssignableFrom 前者类型和后者是否相同，或者是它的超类")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])])}),[],!1,null,null,null);s.default=n.exports}}]);