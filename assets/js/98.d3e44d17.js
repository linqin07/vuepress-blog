(window.webpackJsonp=window.webpackJsonp||[]).push([[98],{322:function(a,e,t){"use strict";t.r(e);var s=t(2),r=Object(s.a)({},(function(){var a=this,e=a.$createElement,t=a._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h3",{attrs:{id:"_1-设置docker加速、运行http访问、远程访问"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-设置docker加速、运行http访问、远程访问","aria-hidden":"true"}},[a._v("#")]),a._v(" 1.设置docker加速、运行http访问、远程访问")]),a._v(" "),t("p",[a._v("Docker 安装成功之后，我们首先需要修改 Docker 配置，开启允许远程访问 Docker 的功能，开启方式很简单，修改 /usr/lib/systemd/system/docker.service 文件，加入如下内容：")]),a._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[a._v("-H tcp://0.0.0.0:2375  -H unix:///var/run/docker.sock\n")])])]),t("p",[a._v("编辑配置 "),t("code",[a._v("/etc/docker/daemon.json")]),a._v(" https://docker.mirrors.ustc.edu.cn 是中国科学技术大学的docker仓库加速器，好像是实时代理的，但是时好时坏，生产环境一定要加 graph 选项，指定 docker 镜像和日志的目录为大空间的目录。启用 live-restore 设置来保持容器当 daemon 变为不可用时继续运行，默认是关闭的。")]),a._v(" "),t("div",{staticClass:"language-json extra-class"},[t("pre",{pre:!0,attrs:{class:"language-json"}},[t("code",[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token property"}},[a._v('"registry-mirrors"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"http://hub-mirror.c.163.com"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"https://pee6w651.mirror.aliyuncs.com"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n\t"),t("span",{pre:!0,attrs:{class:"token property"}},[a._v('"graph"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"/opt/data/docker"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n\t"),t("span",{pre:!0,attrs:{class:"token property"}},[a._v('"live-restore"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("true")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),t("p",[a._v("设置运行http访问，docker 1.3.0 后面默认https，没办法虚拟机跑就很烦，换为自己的 ip 端口")]),a._v(" "),t("div",{staticClass:"language-json extra-class"},[t("pre",{pre:!0,attrs:{class:"language-json"}},[t("code",[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),t("span",{pre:!0,attrs:{class:"token property"}},[a._v('"insecure-registries"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"192.168.85.128:5000"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),t("p",[a._v("重载配置，重启")]),a._v(" "),t("p",[a._v("systemctl daemon-reload")]),a._v(" "),t("p",[a._v("systemctl restart docker")]),a._v(" "),t("h3",{attrs:{id:"_2-搭建私服"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-搭建私服","aria-hidden":"true"}},[a._v("#")]),a._v(" 2.搭建私服")]),a._v(" "),t("p",[a._v("使用 nexus3.x 比较方便")]),a._v(" "),t("p",[t("a",{attrs:{href:"https://yeasy.gitbook.io/docker_practice/repository/nexus3_registry",target:"_blank",rel:"noopener noreferrer"}},[a._v("参考"),t("OutboundLink")],1)]),a._v(" "),t("p",[a._v("docker run -d --name nexus3 --restart=always  -p 8081:8081 -p 8082:8082 -p 8083:8083 -p 8084:8084 --mount src=nexus-data,target=/nexus-data aab1398bb647")]),a._v(" "),t("p",[a._v("再修改http可以访问。")]),a._v(" "),t("h3",{attrs:{id:"_2-镜像操作"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-镜像操作","aria-hidden":"true"}},[a._v("#")]),a._v(" 2.镜像操作")]),a._v(" "),t("p",[a._v("查看本地镜像: "),t("code",[a._v("docker images")])]),a._v(" "),t("p",[a._v("查找仓库镜像:  "),t("code",[a._v("docker search")]),a._v(" [name]")]),a._v(" "),t("table",[t("thead",[t("tr",[t("th",[t("strong",[a._v("REPOSITORY")])]),a._v(" "),t("th",[t("strong",[a._v("TAG")])]),a._v(" "),t("th",[t("strong",[a._v("IMAGE ID")])]),a._v(" "),t("th",[t("strong",[a._v("CREATED")])]),a._v(" "),t("th",[t("strong",[a._v("SIZE")])])])]),a._v(" "),t("tbody",[t("tr",[t("td",[a._v("镜像仓库用户名/镜像名称")]),a._v(" "),t("td",[a._v("镜像版本标签 latest表示最新版")]),a._v(" "),t("td",[a._v("镜像唯一ID")]),a._v(" "),t("td",[a._v("创建时间")]),a._v(" "),t("td",[a._v("镜像文件大小")])]),a._v(" "),t("tr",[t("td",[a._v("docker.io")]),a._v(" "),t("td",[a._v("docker.io/nginx")]),a._v(" "),t("td",[a._v("Official build of Nginx.")]),a._v(" "),t("td",[a._v("14378")]),a._v(" "),t("td",[a._v("[OK]")])])])]),a._v(" "),t("p",[a._v("获取仓库镜像: "),t("code",[a._v("docker pull")]),a._v(" [镜像名称:版本]")]),a._v(" "),t("p",[a._v("创建镜像标签: "),t("code",[a._v("docker tag")]),a._v(" [镜像ID/镜像名称] [Tag内容]")]),a._v(" "),t("p",[a._v("删除镜像: "),t("code",[a._v("docker rmi")]),a._v(" [镜像名称/镜像ID/镜像Tag标签]")]),a._v(" "),t("p",[a._v("如有运行容器，可以强制删除: docker rmi "),t("code",[a._v("-f")]),a._v(" [镜像名称/镜像ID/镜像Tag标签]")]),a._v(" "),t("h3",{attrs:{id:"_3-容器操作"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-容器操作","aria-hidden":"true"}},[a._v("#")]),a._v(" 3.容器操作")]),a._v(" "),t("p",[a._v("创建容器: "),t("code",[a._v("docker create -p 3000:80 --name mynginx docker.io/nginx")])]),a._v(" "),t("ul",[t("li",[t("p",[a._v("-p 3000: 80 宿主机 3000 端口映射容器 80 端口")])]),a._v(" "),t("li",[t("p",[t("code",[a._v("--name")]),a._v(" 指定名称")])])]),a._v(" "),t("p",[a._v("查询容器: docker ps -a")]),a._v(" "),t("p",[a._v("全量查询:"),t("code",[a._v("docker ps --no-trunc")])]),a._v(" "),t("p",[a._v("删除容器: docker rm [name]")]),a._v(" "),t("p",[a._v("删除容器并且显示删除映射的数据卷: docker rm -v [name]")]),a._v(" "),t("p",[a._v("删除所有停止的容器: "),t("code",[a._v("docker rm $(docker ps -a -q)")])]),a._v(" "),t("p",[a._v("进入容器交互模式的终端: "),t("code",[a._v("docker exec -it mynginx [/bin/sh|bash]")]),a._v(" [command]")]),a._v(" "),t("ul",[t("li",[a._v("-d :分离模式: 在后台运行")]),a._v(" "),t("li",[a._v("-i :即使没有附加也保持STDIN 打开")]),a._v(" "),t("li",[a._v("-t :分配一个伪终端")])]),a._v(" "),t("p",[a._v("启停容器: "),t("code",[a._v("docker start/stop/restart")]),a._v(" container_name/container_id")]),a._v(" "),t("p",[a._v("查看容器运行日志: "),t("code",[a._v("docker logs")]),a._v(" container_name/container_id")]),a._v(" "),t("p",[a._v("查看容器数据卷映射:")]),a._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[a._v("docker inspect -f "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v(".Mounts"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v(" mynginx\n")])])]),t("h4",{attrs:{id:"容器导入导出"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#容器导入导出","aria-hidden":"true"}},[a._v("#")]),a._v(" 容器导入导出")]),a._v(" "),t("ul",[t("li",[t("p",[a._v("export")]),a._v(" "),t("p",[a._v("Usage:  docker export [OPTIONS] CONTAINER")]),a._v(" "),t("p",[a._v("Export a container's filesystem as a tar archive")]),a._v(" "),t("p",[a._v("Options:\n-o, --output string   Write to a file, instead of STD")]),a._v(" "),t("p",[t("code",[a._v("docker export -o mynginx.tar ecc7500d8f2e")])])]),a._v(" "),t("li",[t("p",[a._v("import")]),a._v(" "),t("p",[a._v("Usage:  docker import [OPTIONS] file|URL|- [REPOSITORY[:TAG]]")]),a._v(" "),t("p",[a._v("Import the contents from a tarball to create a filesystem image")]),a._v(" "),t("p",[t("code",[a._v("docker import mynginx.tar nginx/mynginx:v1")])])])]),a._v(" "),t("blockquote",[t("p",[a._v("执行导入的镜像报错 docker: Error response from daemon: No command specified.")]),a._v(" "),t("p",[a._v("解决：查看导出的容器运行的命令，追加到运行命令后面即可。使用命令"),t("code",[a._v("docker ps --no-trunc")]),a._v("可以查看完整的容器运行命令。最终运行命令 "),t("code",[a._v("docker run --name nginx01 -d -v /data/nginx/html:/usr/share/nginx/html -v /data/nginx/log/nginx:/var/log/nginx -p 8090:80 c07e13de2ee4 /docker-entrypoint.sh nginx -g 'daemon off;'")])])]),a._v(" "),t("h3",{attrs:{id:"_4-容器运行"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-容器运行","aria-hidden":"true"}},[a._v("#")]),a._v(" 4.容器运行")]),a._v(" "),t("p",[a._v("可以直接创建容器并运行 docker run  [image]")]),a._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[a._v("docker run \n--name nginx \n-d \n-v /data/nginx/html:/usr/share/nginx/html \n-v  /data/nginx/log/nginx:/var/log/nginx \n-p "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("8080")]),a._v(":80 \nnginx\n")])])]),t("p",[t("code",[a._v("--rm")]),a._v(" 停止就删除掉")]),a._v(" "),t("p",[t("code",[a._v("-d")]),a._v(" 后台运行")]),a._v(" "),t("p",[t("code",[a._v("--name")]),a._v(" 指定容器名称")]),a._v(" "),t("p",[t("code",[a._v("-v")]),a._v(" 数据卷挂载目录: [宿主机目录:容器目录]")]),a._v(" "),t("p",[a._v("容器目录不存在会自动创建，映射目录会自动双向同步。创建数据卷 "),t("code",[a._v("-v [数据卷名称]")])]),a._v(" "),t("p",[t("code",[a._v("-p")]),a._v(" 端口映射:[宿主机端口:容器端口]")]),a._v(" "),t("p",[t("code",[a._v("-P")]),a._v("随机端口")]),a._v(" "),t("p",[t("code",[a._v("--privileged=true")]),a._v(" 使用该参数，容器内的root拥有真正的root权限.否则，容器内的root只是外部的一个普通用户权限。")]),a._v(" "),t("p",[t("code",[a._v("--restart=awaly")]),a._v(" 随着容器重启，除非手动关掉了")]),a._v(" "),t("h3",{attrs:{id:"更新容器参数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#更新容器参数","aria-hidden":"true"}},[a._v("#")]),a._v(" 更新容器参数")]),a._v(" "),t("p",[a._v("要为容器配置重启策略，请在使用 docker run 命令时使用 --restart 标志。--restart 标志的值可以是以下任何一种：")]),a._v(" "),t("blockquote",[t("p",[t("code",[a._v("no")]),a._v(" 不要自动重启容器。（默认）")]),a._v(" "),t("p",[t("code",[a._v("on-failure")]),a._v(" 如果容器因错误退出，则重新启动容器，这表现为非零退出代码。")]),a._v(" "),t("p",[t("code",[a._v("always")]),a._v(" 如果容器停止，请始终重新启动容器。如果是手动停止的，只有在 Docker daemon 重启或者容器本身手动重启时才会重启。")]),a._v(" "),t("p",[t("code",[a._v("unless-stopped")]),a._v(" 与 类似"),t("code",[a._v("always")]),a._v("，除了当容器停止（手动或其他方式）时，即使在 Docker 守护进程重新启动后也不会重新启动。")])]),a._v(" "),t("p",[a._v("以下示例启动 Redis 容器并将其配置为始终重新启动，除非它被显式停止或 Docker 重新启动。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("$ docker run -d --restart unless-stopped redis\n")])])]),t("p",[a._v("此命令更改已在运行的名为 redis 的容器的重启策略。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("$ docker update --restart unless-stopped redis\n")])])]),t("p",[a._v("此命令将确保所有当前正在运行的容器将重新启动，除非停止。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("$ docker update --restart unless-stopped $(docker ps -q)\n")])])]),t("h3",{attrs:{id:"_5-文件拷贝"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-文件拷贝","aria-hidden":"true"}},[a._v("#")]),a._v(" 5.文件拷贝")]),a._v(" "),t("p",[a._v("从主机复制到容器 "),t("code",[a._v("sudo docker cp host_path containerID:container_path")])]),a._v(" "),t("p",[a._v("从容器复制到主机 "),t("code",[a._v("sudo docker cp containerID:container_path host_path")])]),a._v(" "),t("h3",{attrs:{id:"_6-数据卷容器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-数据卷容器","aria-hidden":"true"}},[a._v("#")]),a._v(" 6.数据卷容器")]),a._v(" "),t("p",[a._v("数据卷容器（Data Volume Containers）：使用特定容器维护数据卷。从名称上可以看出数据卷容器本质上是一个容器，只不过这个容器专门提供数据卷给其他容器使用，即可以实现不同容器之间数据的同步。")]),a._v(" "),t("p",[a._v("创建数据卷容器，注意 bash 形式是直接运行，exit 就退出了。")]),a._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[a._v("docker run -it --name "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("test")]),a._v(" -v /data nginx "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("bash")]),a._v("\n")])])]),t("p",[a._v("然后创建使用数据卷容器的容器。")]),a._v(" "),t("p",[a._v("命令格式："),t("strong",[a._v("docker run [容器启动参数] --volumes-from [数据卷容器名称] --name [当前容器名称] [当前容器镜像] [bash]")])]),a._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[a._v("docker run -it --volumes-from "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("test")]),a._v(" --name test1 nginx "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("bash")]),a._v("\n")])])]),t("p",[a._v("如果删除了挂载的容器（包括dbdata、db1和db2），数据卷并不会被自动删除。如果要删除一个数据卷，必须在删除最后一个还挂载着它的容器时显式使用"),t("code",[a._v("docker rm -v")]),a._v("命令来指定同时删除关联的容器。")]),a._v(" "),t("h4",{attrs:{id:"数据卷迁移"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数据卷迁移","aria-hidden":"true"}},[a._v("#")]),a._v(" 数据卷迁移")]),a._v(" "),t("ul",[t("li",[a._v("备份")])]),a._v(" "),t("p",[a._v("命令："),t("strong",[a._v("docker run --volumes-from [要备份的数据卷容器名称] -v [宿主机目录]:[当前容器数据卷目录] --name [当前容器名称] --privileged=true [当前容器镜像] tar -cvPf [备份文件保存的目录]  [需要备份的数据卷]")])]),a._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[a._v(" docker run  --volumes-from "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("test")]),a._v(" -v "),t("span",{pre:!0,attrs:{class:"token variable"}},[t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$(")]),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("pwd")]),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v(")")])]),a._v(":/backup --name test3 nginx "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("tar")]),a._v(" -cvPf /backup/backup.tar /data\n")])])]),t("p",[a._v("上述命令表示新运行一个容器，使用 test 数据卷容器，同时映射当前目录 (/data/backup) 到容器里面 /backup 目录，--name 容器命名为 test3，使用 nginx 镜像，执行打包操作 -P 参数表示使用绝对路径，生成 /backup/backup.tar 压缩包，备份数据卷 /data 目录。")]),a._v(" "),t("ul",[t("li",[t("p",[a._v("恢复")]),a._v(" "),t("p",[a._v("解压对应的 tar 包，tar -xvPf backup.tar 解压完成把解压文件放到对应的共享数据卷里面即可。")])])]),a._v(" "),t("h3",{attrs:{id:"_7-容器端口通讯"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-容器端口通讯","aria-hidden":"true"}},[a._v("#")]),a._v(" 7.容器端口通讯")]),a._v(" "),t("p",[a._v("容器端口已经被映射了，不同容器直接想要通讯")]),a._v(" "),t("h3",{attrs:{id:"_8-dockerfile"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_8-dockerfile","aria-hidden":"true"}},[a._v("#")]),a._v(" 8.Dockerfile")]),a._v(" "),t("p",[a._v("Dockerfile用大白话解释就是一个配置文件，里面有各种命令，可用来构建自定义Docker镜像。作用好比如Maven的pom文件一样，可依据设置的指令执行相关的动作。")]),a._v(" "),t("table",[t("thead",[t("tr",[t("th",[t("strong",[a._v("部分")])]),a._v(" "),t("th",[t("strong",[a._v("命令")])])])]),a._v(" "),t("tbody",[t("tr",[t("td",[a._v("基础镜像信息")]),a._v(" "),t("td",[a._v("FROM")])]),a._v(" "),t("tr",[t("td",[a._v("标签、维护者信息")]),a._v(" "),t("td",[a._v("LABEL、MAINTAINER")])]),a._v(" "),t("tr",[t("td",[a._v("镜像操作指令")]),a._v(" "),t("td",[a._v("RUN、COPY、ADD、EXPOSE、WORKDIR、ONBUILD、USER、VOLUME等")])]),a._v(" "),t("tr",[t("td",[a._v("容器启动时执行指令")]),a._v(" "),t("td",[a._v("CMD、ENTRYPOINT")])])])]),a._v(" "),t("h4",{attrs:{id:"命令详解"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#命令详解","aria-hidden":"true"}},[a._v("#")]),a._v(" 命令详解")]),a._v(" "),t("ol",[t("li",[t("p",[a._v("FROM")]),a._v(" "),t("p",[a._v("指定基础镜像，如 FROM java:8")])]),a._v(" "),t("li",[t("p",[a._v("LABEL")]),a._v(" "),t("p",[a._v("设置标签信息，可用来设置自定义镜像的一些基本信息等")]),a._v(" "),t("p",[a._v('LABEL version="1.0"')]),a._v(" "),t("p",[a._v('LABEL description="this is a SpringBoot app"')])]),a._v(" "),t("li",[t("p",[a._v("MAINTAINER")]),a._v(" "),t("p",[a._v("设置作者信息")]),a._v(" "),t("p",[a._v("MAINTAINER linqin woshilinqin163@163.com")])]),a._v(" "),t("li",[t("p",[a._v("RUN")]),a._v(" "),t("p",[a._v("在镜像内部执行的命令，可用来执行一些配置、设置环境、设置域名等")]),a._v(" "),t("p",[a._v("RUN echo 'this is a restful app!' > README.txt")]),a._v(" "),t("p",[a._v('RUN echo "172.31.3.25 autoconf.openspeech.cn" >> /etc/hosts')])]),a._v(" "),t("li",[t("p",[a._v("COPY")]),a._v(" "),t("p",[a._v("将所在主机中的文件复制到容器内，比如我们需要运行某个Java应用，那么在生成自定义镜像的时候得先将，这个应用文件集成到镜像中")]),a._v(" "),t("p",[a._v("如果是目录，复制"),t("code",[a._v("目录里面的内容")]),a._v("到容器，如果容器目录不存在会"),t("code",[a._v("自动创建")]),a._v("。")]),a._v(" "),t("p",[a._v("COPY  vpa-page  /usr/share/nginx/html/vpa-page")])]),a._v(" "),t("li",[t("p",[a._v("ADD")]),a._v(" "),t("p",[a._v("使用和作用同COPY，但是不同的地方在于ADD会对压缩文件（tar, gzip, bzip2, etc）做提取和解压操作")])]),a._v(" "),t("li",[t("p",[a._v("EXPOSE")]),a._v(" "),t("p",[a._v("暴露镜像端口，需要注意的是这边暴露的端口并不意味着在宿主机中可以直接根据这个端口访问，同样的需要在容器启动的时候通过"),t("code",[a._v("-p")]),a._v("参数设置宿主机端口映射，或者 "),t("code",[a._v("-P")]),a._v("随机端口映射")]),a._v(" "),t("p",[a._v("EXPOSE $POSR")])]),a._v(" "),t("li",[t("p",[a._v("WORKDIR")]),a._v(" "),t("p",[a._v("指定工作目录，后续命令操作都是基于此目录")]),a._v(" "),t("p",[a._v("WORKDIR $WOEK_DIR")])]),a._v(" "),t("li",[t("p",[a._v("USER")]),a._v(" "),t("p",[a._v("指定容器启动后以哪个用户身份去运行")]),a._v(" "),t("p",[a._v("USER ROOT")])]),a._v(" "),t("li",[t("p",[a._v("VOLUME")]),a._v(" "),t("p",[a._v("挂载容器数据卷，即将宿主机器某个目录和容器中某个目录进行映射，主要用来存放数据。")]),a._v(" "),t("p",[a._v("添加数据卷，注意这里是无法指定宿主机器目录的。这里设置容器中当前工作目录下的 log 目录为数据卷，那么后期容器实际运行的时候这个下面的文件会实时同步到对应的随机分配的宿主机映射目录中。")]),a._v(" "),t("p",[a._v("VOLUME $WORK_DIR/log")])]),a._v(" "),t("li",[t("p",[a._v("CMD |  ENTRYPOINT")]),a._v(" "),t("p",[a._v("容器启动的时候执行的命令，相当于在定义镜像的时候就约定好了运行容器后执行的命令，当有多个CMD的时候，只有最后一个生效。用户启动容器时候指定了运行的命令，则会覆盖掉 CMD 指定的命令，ENTRYPOINT 不会覆盖。")]),a._v(" "),t("p",[a._v("CMD java -jar $WORK_DIR/xxx.jar")])])]),a._v(" "),t("p",[t("strong",[a._v("案例:")])]),a._v(" "),t("p",[a._v("新建dockerfile文件：touch dockerfile 、vim dockerfile，注意文件名称必须是dockerfile")]),a._v(" "),t("div",{staticClass:"language-dockerfile extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('#Dockerfile文件:自定义 Docker 镜像文件\n#声明需要用到的基础镜像\nFROM java:8\n#声明基础信息\nLABEL version="1.0"\nLABEL description="This is a SpringBoot test app"\n#声明作者信息\nMAINTAINER linqin linqin_07@aliyun.com \n#声明环境变量\nENV WORK_DIR=/app PORT=8080\n#声明工作目录\nWORKDIR $WORK_DIR\n#在镜像内部执行一些配置命令\nRUN echo \'This is a test app !\'> README.txt\n#将要运行的Java应用复制到镜像内\nCOPY spring-boot-test-0.0.1-SNAPSHOT.jar $WORK_DIR/spring-boot-test-0.0.1-SNAPSHOT.jar\n#暴露镜像端口:这里为应用的访问端口\nEXPOSE $PORT\n#添加数据卷:这里将日志文件目录添加为数据卷(注意是无法指定宿主机目录的)\nVOLUME $WORK_DIR/logs\n#设置容器启动命令:即启动Java应用\nCMD java -jar $WORK_DIR/spring-boot-test-0.0.1-SNAPSHOT.jar\n')])])]),t("p",[a._v("执行命令生成镜像 -f 命令指定使用其他目录 Dockerfile\ndocker build -t name:tag .")]),a._v(" "),t("p",[a._v("执行生成镜像命令")]),a._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[a._v(" docker build -t spring-boot-test.jar "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v(".")]),a._v("\n \nSending build context to Docker daemon  "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v(".379GB\nStep "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v("/11 "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v(":")]),a._v(" FROM java:8\n"),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("8")]),a._v(": Pulling from library/java\n5040bd298390: Pull complete \nfce5728aad85: Pull complete \n76610ec20bf5: Pull complete \n60170fec2151: Pull complete \ne98f73de8f0d: Pull complete \n11f7af24ed9c: Pull complete \n49e2d6393f32: Pull complete \nbb9cdec9c7f3: Pull complete \nDigest: sha256:c1ff613e8ba25833d2e1940da0940c3824f03f802c449f3d1815a66b7f8c0e9d\nStatus: Downloaded newer image "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("for")]),a._v(" java:8\n ---"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" d23bdf5b1b1b\nStep "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),a._v("/11 "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v(":")]),a._v(" LABEL "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("version")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"1.0"')]),a._v("\n ---"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" Running "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("in")]),a._v(" fd6007d24044\nRemoving intermediate container fd6007d24044\n ---"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" 5743ec2d1bb3\nStep "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),a._v("/11 "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v(":")]),a._v(" LABEL "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("description")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"This is a SpringBoot test app"')]),a._v("\n ---"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" Running "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("in")]),a._v(" ff5c1a782b17\nRemoving intermediate container ff5c1a782b17\n ---"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" d96ea2194e36\nStep "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("4")]),a._v("/11 "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v(":")]),a._v(" MAINTAINER linqin linqin_07@aliyun.com\n ---"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" Running "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("in")]),a._v(" b88acdfff8d8\nRemoving intermediate container b88acdfff8d8\n ---"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" 71ec80304a33\nStep "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("5")]),a._v("/11 "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v(":")]),a._v(" ENV "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("WORK_DIR")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("/app "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("PORT")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("8080")]),a._v("\n ---"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" Running "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("in")]),a._v(" 7c19d3083dff\nRemoving intermediate container 7c19d3083dff\n ---"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" 09139b9a3b5f\nStep "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("6")]),a._v("/11 "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v(":")]),a._v(" WORKDIR "),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$WORK_DIR")]),a._v("\n ---"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" Running "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("in")]),a._v(" 5ec9bafe6203\nRemoving intermediate container 5ec9bafe6203\n ---"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" fca757b40019\nStep "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("7")]),a._v("/11 "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v(":")]),a._v(" RUN "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'This is a test app !'")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" README.txt\n ---"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" Running "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("in")]),a._v(" d0da4bde9edf\nRemoving intermediate container d0da4bde9edf\n ---"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" 5d4cf880d3fa\nStep "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("8")]),a._v("/11 "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v(":")]),a._v(" COPY spring-boot-test-0.0.1-SNAPSHOT.jar "),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$WORK_DIR")]),a._v("/spring-boot-test-0.0.1-SNAPSHOT.jar\n ---"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" f9621fe4ca36\nStep "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("9")]),a._v("/11 "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v(":")]),a._v(" EXPOSE "),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$PORT")]),a._v("\n ---"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" Running "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("in")]),a._v(" a5f6010b1f0f\nRemoving intermediate container a5f6010b1f0f\n ---"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" a1606933767d\nStep "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("10")]),a._v("/11 "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v(":")]),a._v(" VOLUME "),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$WORK_DIR")]),a._v("/logs\n ---"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" Running "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("in")]),a._v(" c2909474a96b\nRemoving intermediate container c2909474a96b\n ---"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" d04bf50acb7f\nStep "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("11")]),a._v("/11 "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v(":")]),a._v(" CMD java -jar "),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$WORK_DIR")]),a._v("/spring-boot-test-0.0.1-SNAPSHOT.jar\n ---"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" Running "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("in")]),a._v(" 569f354af7e8\nRemoving intermediate container 569f354af7e8\n ---"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" f92d928f8145\nSuccessfully built f92d928f8145\nSuccessfully tagged spring-boot-test.jar:latest\n")])])]),t("p",[a._v("这样生成的镜像就可以使用"),t("code",[a._v("docker images")]),a._v("查看")]),a._v(" "),t("p",[a._v("运行该镜像")]),a._v(" "),t("h3",{attrs:{id:"个人理解"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#个人理解","aria-hidden":"true"}},[a._v("#")]),a._v(" 个人理解")]),a._v(" "),t("p",[a._v("docker 有点是可以很快速的启动一些应用，不用担心环境问题。但是具体使用时尽量避免映射过多的路径，这样就失去了 docker 的本意，可以采取进入容器的方式进行管理。缺点是如果要具体对应用进行调优，这将是非常麻烦的事情。")]),a._v(" "),t("p",[a._v("but，集成k8s后，真香！！！")]),a._v(" "),t("h3",{attrs:{id:"docker-compose"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#docker-compose","aria-hidden":"true"}},[a._v("#")]),a._v(" docker-compose")]),a._v(" "),t("p",[a._v("作用容器编排")]),a._v(" "),t("h4",{attrs:{id:"安装"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#安装","aria-hidden":"true"}},[a._v("#")]),a._v(" 安装")]),a._v(" "),t("p",[a._v("若是github访问太慢，可以用daocloud下载")]),a._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[a._v("sudo")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("curl")]),a._v(" -L https://get.daocloud.io/docker/compose/releases/download/1.25.1/docker-compose-"),t("span",{pre:!0,attrs:{class:"token variable"}},[t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("`")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("uname")]),a._v(" -s"),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("`")])]),a._v("-"),t("span",{pre:!0,attrs:{class:"token variable"}},[t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("`")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("uname")]),a._v(" -m"),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("`")])]),a._v(" -o /usr/local/bin/docker-compose\n")])])]),t("p",[a._v("添加可执行权限\nsudo chmod +x /usr/local/bin/docker-compose\n测试安装结果\n$ docker-compose -v")]),a._v(" "),t("h4",{attrs:{id:"docker-compose常用命令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#docker-compose常用命令","aria-hidden":"true"}},[a._v("#")]),a._v(" docker-compose常用命令")]),a._v(" "),t("ul",[t("li",[a._v("1、docker-compose ps 查询当前启动的服务")]),a._v(" "),t("li",[a._v("2、docker-compose up -d [service]  启动编排号的服务")]),a._v(" "),t("li",[a._v("3、docker-compose stop [service] 停止服务")]),a._v(" "),t("li",[a._v("4、docker-compose restart [service] 重启服务")]),a._v(" "),t("li",[a._v("5、docker-compose rm 删除服务容器")]),a._v(" "),t("li",[a._v("6、【-f docker-compose-*.yml】指定自定义的yml文件例如，docker-compose -f docker-compose-1.yml up -d 启动docker-compose-1.yml")]),a._v(" "),t("li",[a._v("7.删除service[同时会删除掉network和volume]\ndocker-compose down")]),a._v(" "),t("li",[a._v("进入到某个service，bash更好用\ndocker-compose exec [service] [sh|bash]")])]),a._v(" "),t("h4",{attrs:{id:"新建文件-docker-compose-yml"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#新建文件-docker-compose-yml","aria-hidden":"true"}},[a._v("#")]),a._v(" 新建文件 docker-compose.yml")]),a._v(" "),t("p",[a._v("默认在这个文件下面执行命令，否则需要 "),t("code",[a._v("-f")]),a._v("参数指定")]),a._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[a._v("version: "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'3'")]),a._v("\nservices:\n  vpa-eureka-server:\n    image: java\n    restart: "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"always"')]),a._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("#重启策略，能够使服务保持始终运行，生产环境推荐使用")]),a._v("\n    container_name: "),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("${env}")]),a._v("-vpa-eureka-server "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("#容器名称")]),a._v("\n    volumes:\n      - /opt/vpa/jar/vpa-eureka-server-0.0.1-SNAPSHOT.jar:/usr/vpa-eureka-server.jar\n    network_mode: "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"host"')]),a._v("\n    ports:\n      - "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("8761")]),a._v(":8761\n    entrypoint: java -jar -Xms1g -Xmx1g /usr/vpa-eureka-server.jar --spring.profiles.active"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("${env}")]),a._v("\n    environment:\n      - "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("TZ")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("Asia/Shanghai\n    labels:\n      - "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"servicename=vpa-eureka-server"')]),a._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("#设置名称，默认是容器名称")]),a._v("\n")])])])])}),[],!1,null,null,null);e.default=r.exports}}]);