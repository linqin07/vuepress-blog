(window.webpackJsonp=window.webpackJsonp||[]).push([[122],{517:function(a,t,s){"use strict";s.r(t);var e=s(20),r=Object(e.a)({},(function(){var a=this,t=a._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h3",{attrs:{id:"find"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#find"}},[a._v("#")]),a._v(" find")]),a._v(" "),t("h6",{attrs:{id:"type"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#type"}},[a._v("#")]),a._v(" -type")]),a._v(" "),t("p",[a._v("查找文件类型"),t("code",[a._v("f")]),a._v("，目录类型"),t("code",[a._v("d")]),a._v("，文本类型，链接类型"),t("code",[a._v("l")])]),a._v(" "),t("blockquote",[t("p",[a._v("find ./ -type f")])]),a._v(" "),t("h6",{attrs:{id:"name"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#name"}},[a._v("#")]),a._v(" -name")]),a._v(" "),t("p",[a._v("按名字查询，查询名字为test的目录或者文件")]),a._v(" "),t("blockquote",[t("p",[a._v("find ./ -name test")]),a._v(" "),t("p",[a._v("find ./ -name ‘*.log’")])]),a._v(" "),t("h6",{attrs:{id:"ctime-n-atime-n-cmin-n-amin-n"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#ctime-n-atime-n-cmin-n-amin-n"}},[a._v("#")]),a._v(" -ctime +n | -atime -n | -cmin +n | -amin -n")]),a._v(" "),t("p",[a._v("c 表示修改过，a 表示读取过，+n 表示在多少天/分钟"),t("code",[a._v("前")]),a._v("，-n 表示在多少天/分钟"),t("code",[a._v("内")])]),a._v(" "),t("h6",{attrs:{id:"size"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#size"}},[a._v("#")]),a._v(" -size")]),a._v(" "),t("p",[a._v("查询大小小于10M的文件，正负表示大于小于，G，M兆，k（kb），c（字节）")]),a._v(" "),t("blockquote",[t("p",[a._v("find ./ -type f -size -10M")])]),a._v(" "),t("h6",{attrs:{id:"maxdepth"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#maxdepth"}},[a._v("#")]),a._v(" -maxdepth")]),a._v(" "),t("p",[a._v("查询层级，多个组合放在前面")]),a._v(" "),t("blockquote",[t("p",[a._v("find / -maxdepth 1")])]),a._v(" "),t("h6",{attrs:{id:"exec"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#exec"}},[a._v("#")]),a._v(" -exec")]),a._v(" "),t("p",[a._v("{} \\结尾，中间有空格，"),t("code",[a._v("花括号代表前面``find``查找出来的文件名")]),a._v("，中间补全其他条件。表示执行其他的操作，和管道差不多。")]),a._v(" "),t("blockquote",[t("p",[a._v('find . -type f -exec grep -l "dev" {} ;')]),a._v(" "),t("p",[a._v("删除两天前的后缀为log的文件")]),a._v(" "),t("p",[a._v('find /data -ctime +2 -name "*.log" -exec rm -rf {} ;')])]),a._v(" "),t("h6",{attrs:{id:"xargs"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#xargs"}},[a._v("#")]),a._v(" -xargs")]),a._v(" "),t("p",[a._v("xargs可以将输入内容（通常通过命令行管道传递），转成后续命令的参数。")]),a._v(" "),t("p",[a._v("用于结果输出后续对结果的命令操作。有些命令不支持管道。")]),a._v(" "),t("blockquote",[t("p",[a._v('find /home -name * | xargs grep "max_children"')]),a._v(" "),t("p",[a._v("cat pidkill.txt | xargs kill -9")]),a._v(" "),t("h5",{attrs:{id:"使用-d-分割输入"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#使用-d-分割输入"}},[a._v("#")]),a._v(" 使用 -d 分割输入")]),a._v(" "),t("p",[t("strong",[a._v("-d 选项")]),a._v(" 可以自定义一个定界符：")]),a._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"nameXnameXnameXname"')]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("xargs")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-dX")]),a._v("\nname name name name\n")])])]),t("h5",{attrs:{id:"使用-n-进行多行输出"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#使用-n-进行多行输出"}},[a._v("#")]),a._v(" 使用 -n 进行多行输出")]),a._v(" "),t("p",[t("strong",[a._v("-n 选项")]),a._v(" 多行输出：")]),a._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[a._v("cat")]),a._v(" test.txt "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("xargs")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-n3")]),a._v("\n\na b c\n")])])])]),a._v(" "),t("h3",{attrs:{id:"grep"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#grep"}},[a._v("#")]),a._v(" grep")]),a._v(" "),t("ul",[t("li",[a._v("-r  表示迭代文件夹")]),a._v(" "),t("li",[a._v("-i  忽略大小写")]),a._v(" "),t("li",[a._v("-v 反转查找")]),a._v(" "),t("li",[a._v("-w 默认模糊匹配，-w 参数为全匹配（精确匹配）")]),a._v(" "),t("li",[a._v("-f  指定 file 与之匹配（标准的文件一定"),t("code",[a._v("不能有空行")]),a._v("才行，否则空行后面全部能匹配）")]),a._v(" "),t("li",[a._v("-E <regex> 和正则匹配，和 egrep（只能文本匹配，不能正则） 差不多")]),a._v(" "),t("li",[a._v("-A 20 获取匹配后面20行")]),a._v(" "),t("li",[a._v("-B 20 获取匹配前面20行")]),a._v(" "),t("li",[a._v("-C 20 获取匹配前后面20行")]),a._v(" "),t("li",[t("code",[a._v("--color")]),a._v(" 关键字加粗")]),a._v(" "),t("li",[a._v("-l  显示文件名")]),a._v(" "),t("li",[a._v("-n 在显示符合范本样式的那一列之前，标示出该列的编号")]),a._v(" "),t("li",[a._v("-c count 计数，等同 wc -l")])]),a._v(" "),t("h6",{attrs:{id:"例子"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#例子"}},[a._v("#")]),a._v(" 例子：")]),a._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 指定文件后缀grep")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("grep")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'shopbase'")]),a._v(" /home/admin "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-r")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-n")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--include")]),a._v(" *."),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("vm,java"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 反匹配")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("grep")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'shopbase'")]),a._v(" /home/admin "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-r")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-n")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--exclude")]),a._v(" *."),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("vm,java"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("#多文件")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("grep")]),a._v(" word f.txt cpf.txt\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("#遍历文件夹搜索关键词。")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("grep")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-rl")]),a._v(" webSocket ./\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 打印出文件2中与文件1中的相同行")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("grep")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-fw")]),a._v(" txt1 txt2\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 排除txt2中所有的txt1行")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("grep")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-vfw")]),a._v(" txt1 txt2\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("#正则以f结尾")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("cat")]),a._v(" test.txt "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("grep")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-E")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'f$'")]),a._v("\nddddd f\n")])])])])}),[],!1,null,null,null);t.default=r.exports}}]);