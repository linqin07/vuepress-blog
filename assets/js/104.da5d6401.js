(window.webpackJsonp=window.webpackJsonp||[]).push([[104],{501:function(t,a,s){"use strict";s.r(a);var i=s(20),n=Object(i.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"nginx"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#nginx"}},[t._v("#")]),t._v(" Nginx")]),t._v(" "),a("p",[t._v("Nginx 是一款自由的、开源的、高性能的 HTTP 服务器和"),a("code",[t._v("反向代理")]),t._v("服务器；同时也是一个 IMAP、POP3、SMTP 代理服务器；Nginx 可以作为一个 HTTP 服务器进行网站的发布处理，另外 Nginx 可以作为反向代理进行负载均衡的实现。")]),t._v(" "),a("h3",{attrs:{id:"正向代理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#正向代理"}},[t._v("#")]),t._v(" 正向代理")]),t._v(" "),a("p",[t._v("简单理解就是叫别人帮忙代购，别人充当代理服务器的角色。你需要知道正向代理服务器的IP地址，还有代理程序的端口。")]),t._v(" "),a("p",[t._v('正向代理，"它代理的是客户端"，是一个位于客户端和原始服务器 (origin server) 之间的服务器，为了从原始服务器取得内容，客户端向代理发送一个请求并指定目标(原始服务器)，然后代理向原始服务器转交请求并将获得的内容返回给客户端。客户端必须要进行一些特别的设置才能使用正向代理。')]),t._v(" "),a("p",[a("img",{attrs:{src:"https://blog-07.oss-cn-guangzhou.aliyuncs.com/picBak/1569035615831.png",alt:"1569035615831.png"}})]),t._v(" "),a("h3",{attrs:{id:"反向代理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#反向代理"}},[t._v("#")]),t._v(" 反向代理")]),t._v(" "),a("p",[t._v("随着微服务的的流行，同一个操作的微服务可能有好几个。多个客户端给服务器发送的请求，Nginx 服务器接收到之后，按照一定的规则分发给了后端的业务处理服务器进行处理了。此时~请求的来源也就是客户端是明确的，但是请求具体由哪台服务器处理的并不明确了，Nginx 扮演的就是一个"),a("code",[t._v("反向代理")]),t._v("角色。")]),t._v(" "),a("p",[t._v("客户端是无感知代理的存在的，反向代理对外都是透明的，访问者并不知道自己访问的是一个代理。因为客户端不需要任何配置就可以访问。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://blog-07.oss-cn-guangzhou.aliyuncs.com/picBak/1569035961427.png",alt:"1569035961427.png"}})]),t._v(" "),a("h3",{attrs:{id:"负载均衡"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#负载均衡"}},[t._v("#")]),t._v(" 负载均衡")]),t._v(" "),a("p",[t._v("Nginx扮演了反向代理服务器的角色，Nginx 反向代理服务器接收到的请求数量，就是我们说的负载量。")]),t._v(" "),a("p",[t._v("请求数量按照一定的规则进行分发到不同的服务器处理的规则，就是一种均衡规则。")]),t._v(" "),a("p",[t._v("所以~将服务器接收到的请求按照规则分发的过程，称为负载均衡。")]),t._v(" "),a("p",[t._v("Nginx支持的负载均衡调度算法方式如下：")]),t._v(" "),a("ol",[a("li",[t._v("weight 轮询(默认)：接收到的请求按照顺序逐一分配到不同的后端服务器，即使在使用过程中，某一台后端服务器宕机，Nginx 会自动将该服务器剔除出队列，请求受理情况不会受到任何影响。这种方式下，可以给不同的后端服务器设置一个权重值 (weight)，用于调整不同的服务器上请求的分配率；权重数据越大，被分配到请求的几率越大；该权重值，主要是针对实际工作环境中不同的后端服务器硬件配置进行调整的。")]),t._v(" "),a("li",[t._v("ip_hash：每个请求按照发起客户端的 ip 的 hash 结果进行匹配，这样的算法下一个固定 ip 地址的客户端总会访问到同一个后端服务器，这也在一定程度上解决了集群部署环境下 session 共享的问题。")]),t._v(" "),a("li",[t._v("fair：智能调整调度算法，动态的根据后端服务器的请求处理到响应的时间进行均衡分配，响应时间短处理效率高的服务器分配到请求的概率高，响应时间长处理效率低的服务器分配到的请求少；结合了前两者的优点的一种调度算法。但是需要注意的是 Nginx 默认不支持 fair 算法，如果要使用这种调度算法，请安装 upstream_fair 模块。")]),t._v(" "),a("li",[t._v("url_hash：按照访问的 url 的 hash 结果分配请求，每个请求的 url 会指向后端固定的某个服务器，可以在Nginx 作为静态服务器的情况下提高缓存效率。同样要注意 Nginx 默认不支持这种调度算法，要使用的话需要安装 Nginx 的 hash 软件包。")])])])}),[],!1,null,null,null);a.default=n.exports}}]);