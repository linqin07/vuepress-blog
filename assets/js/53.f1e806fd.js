(window.webpackJsonp=window.webpackJsonp||[]).push([[53],{278:function(a,e,t){"use strict";t.r(e);var s=t(2),n=Object(s.a)({},(function(){var a=this,e=a.$createElement,t=a._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h3",{attrs:{id:"_1-构建多模块项目-a-里面的子项目-b"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-构建多模块项目-a-里面的子项目-b","aria-hidden":"true"}},[a._v("#")]),a._v(" 1.构建多模块项目 A 里面的子项目 B")]),a._v(" "),t("ul",[t("li",[t("p",[t("code",[a._v("mvn package")]),a._v("当我真的想要时，是否必须为整个项目层次结构运行"),t("code",[a._v("B")]),a._v("，多模块慢")])]),a._v(" "),t("li",[t("p",[a._v("每次打包时都必须将A的快照安装到本地存储库中"),t("code",[a._v("B")]),a._v("吗")])]),a._v(" "),t("li",[t("p",[t("code",[a._v("mvn install -pl :B -am")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("-pl, --projects\n        Build specified reactor projects instead of all projects\n-am, --also-make\n        If project list is specified, also build projects required by the list\n")])])]),t("p",[a._v("因此，只需"),t("code",[a._v("cd")]),a._v("进入父P目录并运行：")]),a._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[a._v("mvn "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("install")]),a._v(" -pl B -am\n")])])]),t("p",[a._v("这将构建B以及B所需的模块。")]),a._v(" "),t("p",[a._v("请注意，如果引用"),t("code",[a._v("artifactId")]),a._v("的目录名称与目录名称不同，则需要使用冒号：")]),a._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[a._v("mvn\n")])])])])]),a._v(" "),t("h3",{attrs:{id:"_2-使用命令上传jar包"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-使用命令上传jar包","aria-hidden":"true"}},[a._v("#")]),a._v(" 2.使用命令上传jar包")]),a._v(" "),t("p",[a._v("maven 的 setting 文件要配置好对应的私服地址，执行命令的目录要在有pom的地方，同时注意文件的路径会相应抓换为相对路径。")]),a._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[a._v("mvn deploy:deploy-file \n-DgroupId"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("com.xxx\n-DartifactId"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("base-common \n-Dversion"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1.0")]),a._v(".0-SNAPSHOT \n-Dpackaging"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("jar -Dfile"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("D:/base-common-1.0.0-SNAPSHOT.Jar \n-Durl"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("http://192.168.13.51:8081/repository/my_snapshot \n-DrepositoryId"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("my_snapshot\n")])])]),t("p",[a._v("本地jar上传私服，mvn命令可以两种方式，一种是自己填写DgroupId、DartifactId、Dversion，也可以直接不填这3个直接使用-DpomFile，指向本地仓库jar地址的pom文件\n需要注意的是，需要预先复制对应的jar和pom到"),t("code",[a._v("临时目录")]),a._v("，否则直接再仓库目录执行会报错。\n此外还有一个需要注意的点，上传到release只能上传一次，不能覆盖，否则提示409。上传到 SNAPSHOT ，jar包名称必须包含这个SNAPSHOT\n下面有一个bat脚本，新建一个临时文件夹，复制进去，cmd执行 "),t("code",[a._v("deploy.bat 仓库要上传的jar的目录")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('rem 修改utf-8字符集\nchcp 65001\n\n@echo off\nsetlocal enabledelayedexpansion\n\nset "pom_path=%~1"\n\n:: 改为自己的maven nexus地址\nset "NEXUS_URL=http://ddd.sss.com/artifactory/auto-mvn-ss-private/"\nset "REPOSITORY_ID=mvn-releases"\n\nset "POMS=poms.txt"\ndir /s /b "%pom_path%\\*.pom" | sort > %POMS% || exit /b 1\nfor /f "tokens=*" %%p in (%POMS%) do (\n    :: 复制pom文件到当前目录\\\n    copy "%%p" .\n    echo "复制pom文件%%p到当前目录"\n    for /f "delims=" %%a in ("%%p") do set "pom_file_name=%%~nxa"\n    set "jar=%%p"\n    echo %%p\n    echo Before replacement: !jar!\n    :: 将pom文件后缀换成.jar找到对应的jar文件（此处根据约定pom/jar文件只是后缀不同来进行推测）\n    set "jar=!jar:.pom=.jar!"\n\n    :: 如果jar文件存在，则将其复制到当前目录\n    if exist "!jar!" (\n       echo "复制jar文件!jar!到当前目录"\n        copy "!jar!" .\n        for /f "delims=" %%a in ("!jar!") do set "jar_file_name=%%~nxa"\n        :: 部署jar文件，附带自身提供的pom文件\n        echo         mvn deploy:deploy-file -Dfile=!jar_file_name! -Durl=%NEXUS_URL% -DrepositoryId=%REPOSITORY_ID% -DpomFile=!pom_file_name! -Dpackaging=jar\n        mvn deploy:deploy-file -Dfile=!jar_file_name! -Durl=%NEXUS_URL% -DrepositoryId=%REPOSITORY_ID% -DpomFile=!pom_file_name! -Dpackaging=jar\n\n    ) else (\n        :: 只部署pom文件\n        mvn deploy:deploy-file -Dfile=!pom_file_name! -Durl=%NEXUS_URL% -DrepositoryId=%REPOSITORY_ID% -DpomFile=!pom_file_name! -Dpackaging=pom\n    )\n\n)\n:: 清理POM列表文件\ndel /q /f %POMS%\n\nendlocal\n\n')])])]),t("h3",{attrs:{id:"_3-maven-指定配置文件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-maven-指定配置文件","aria-hidden":"true"}},[a._v("#")]),a._v(" 3.maven 指定配置文件")]),a._v(" "),t("p",[t("code",[a._v("-s,--settings")])]),a._v(" "),t("p",[t("code",[a._v("-gs,--global-settings")])]),a._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[a._v("mvn -gs /data/maven/setting.xml clean\nmvn gs /data/maven/setting.xml clean\n")])])]),t("h3",{attrs:{id:"依赖原则"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#依赖原则","aria-hidden":"true"}},[a._v("#")]),a._v(" 依赖原则")]),a._v(" "),t("ol",[t("li",[a._v("依赖路径最短优先原则")])]),a._v(" "),t("div",{staticClass:"language-html extra-class"},[t("pre",{pre:!0,attrs:{class:"language-html"}},[t("code",[a._v("A -> B -> C -> X(1.0)\nA -> D -> X(2.0)\n")])])]),t("p",[a._v("由于 X(2.0) 路径最短，所以使用 X(2.0)。")]),a._v(" "),t("ol",{attrs:{start:"2"}},[t("li",[a._v("声明顺序优先原则")])]),a._v(" "),t("div",{staticClass:"language-html extra-class"},[t("pre",{pre:!0,attrs:{class:"language-html"}},[t("code",[a._v("A -> B -> X(1.0)\nA -> C -> X(2.0)\n")])])]),t("p",[a._v("在 POM 中最先声明的优先，上面的两个依赖如果先声明 B，那么最后使用 X(1.0)。")]),a._v(" "),t("ol",{attrs:{start:"3"}},[t("li",[a._v("覆写优先原则")])]),a._v(" "),t("p",[a._v("子 POM 内声明的依赖优先于父 POM 中声明的依赖。")]),a._v(" "),t("h4",{attrs:{id:"依赖传递"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#依赖传递","aria-hidden":"true"}},[a._v("#")]),a._v(" 依赖传递")]),a._v(" "),t("p",[a._v("项目之间有依赖引用，可以使用 "),t("code",[a._v("<optional>true</optional>")]),a._v("显式说明该依赖不用传递下去，适用于直接依赖关系或者使用 "),t("code",[a._v("<dependencies>")]),a._v(" 进行依赖管理直接添加使用。")]),a._v(" "),t("div",{staticClass:"warning custom-block"},[t("p",[a._v("模块关系为继承 parent 时，"),t("code",[a._v("<optional>")]),a._v(" 设置")])]),a._v(" "),t("h4",{attrs:{id:"解决依赖冲突"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#解决依赖冲突","aria-hidden":"true"}},[a._v("#")]),a._v(" 解决依赖冲突")]),a._v(" "),t("p",[a._v("找到 Maven 加载的 Jar 包版本，使用 "),t("code",[a._v("mvn dependency:tree")]),a._v(" 查看依赖树，根据依赖原则来调整依赖在 POM 文件的声明顺序。")])])}),[],!1,null,null,null);e.default=n.exports}}]);