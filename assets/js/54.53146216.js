(window.webpackJsonp=window.webpackJsonp||[]).push([[54],{452:function(t,a,e){"use strict";e.r(a);var s=e(20),r=Object(s.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"centos7安装维护gitlab"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#centos7安装维护gitlab"}},[t._v("#")]),t._v(" CentOS7安装维护Gitlab")]),t._v(" "),a("h1",{attrs:{id:"目录"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#目录"}},[t._v("#")]),t._v(" 目录")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://github.com/guanhui07/blog/issues/392#%E5%AE%98%E6%96%B9%E5%AE%89%E8%A3%85",target:"_blank",rel:"noopener noreferrer"}},[t._v("官方安装"),a("OutboundLink")],1)]),t._v(" "),a("li",[t._v("第三方镜像安装\n"),a("ul",[a("li",[a("a",{attrs:{href:"https://github.com/guanhui07/blog/issues/392#%E7%BC%96%E8%BE%91%E6%BA%90",target:"_blank",rel:"noopener noreferrer"}},[t._v("编辑源"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/guanhui07/blog/issues/392#%E6%9B%B4%E6%96%B0%E6%9C%AC%E5%9C%B0yum%E7%BC%93%E5%AD%98",target:"_blank",rel:"noopener noreferrer"}},[t._v("更新本地YUM缓存"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/guanhui07/blog/issues/392#%E5%AE%89%E8%A3%85%E7%A4%BE%E5%8C%BA%E7%89%88",target:"_blank",rel:"noopener noreferrer"}},[t._v("安装社区版"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/guanhui07/blog/issues/392#%E6%9B%B4%E6%94%B9%E9%85%8D%E7%BD%AE",target:"_blank",rel:"noopener noreferrer"}},[t._v("更改配置"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/guanhui07/blog/issues/392#%E9%85%8D%E7%BD%AE%E5%B9%B6%E5%90%AF%E5%8A%A8gitlab",target:"_blank",rel:"noopener noreferrer"}},[t._v("配置并启动GitLab"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/guanhui07/blog/issues/392#%E7%99%BB%E5%BD%95gitlab",target:"_blank",rel:"noopener noreferrer"}},[t._v("登录GitLab"),a("OutboundLink")],1)])])]),t._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/guanhui07/blog/issues/392#docker%E5%AE%89%E8%A3%85",target:"_blank",rel:"noopener noreferrer"}},[t._v("Docker安装"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/guanhui07/blog/issues/392#%E5%8D%B8%E8%BD%BD",target:"_blank",rel:"noopener noreferrer"}},[t._v("卸载"),a("OutboundLink")],1)]),t._v(" "),a("li",[t._v("运维\n"),a("ul",[a("li",[a("a",{attrs:{href:"https://github.com/guanhui07/blog/issues/392#%E6%9C%8D%E5%8A%A1%E7%AE%A1%E7%90%86",target:"_blank",rel:"noopener noreferrer"}},[t._v("服务管理"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/guanhui07/blog/issues/392#%E6%97%A5%E5%BF%97%E6%9F%A5%E7%9C%8B",target:"_blank",rel:"noopener noreferrer"}},[t._v("日志查看"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/guanhui07/blog/issues/392#%E9%87%8D%E7%BD%AE%E7%AE%A1%E7%90%86%E5%91%98%E5%AF%86%E7%A0%81",target:"_blank",rel:"noopener noreferrer"}},[t._v("重置管理员密码"),a("OutboundLink")],1)])])]),t._v(" "),a("li",[t._v("备份恢复\n"),a("ul",[a("li",[a("a",{attrs:{href:"https://github.com/guanhui07/blog/issues/392#%E4%BF%AE%E6%94%B9%E5%A4%87%E4%BB%BD%E6%96%87%E4%BB%B6%E9%BB%98%E8%AE%A4%E7%9B%AE%E5%BD%95",target:"_blank",rel:"noopener noreferrer"}},[t._v("修改备份文件默认目录"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/guanhui07/blog/issues/392#%E5%88%9B%E5%BB%BA%E5%A4%87%E4%BB%BD",target:"_blank",rel:"noopener noreferrer"}},[t._v("创建备份"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/guanhui07/blog/issues/392#%E5%BC%80%E5%A7%8B%E5%A4%87%E4%BB%BD",target:"_blank",rel:"noopener noreferrer"}},[t._v("开始备份"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/guanhui07/blog/issues/392#%E8%87%AA%E5%8A%A8%E5%A4%87%E4%BB%BD",target:"_blank",rel:"noopener noreferrer"}},[t._v("自动备份"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/guanhui07/blog/issues/392#%E5%A4%87%E4%BB%BD%E4%BF%9D%E7%95%99%E4%B8%83%E5%A4%A9",target:"_blank",rel:"noopener noreferrer"}},[t._v("备份保留七天"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/guanhui07/blog/issues/392#%E5%BC%80%E5%A7%8B%E6%81%A2%E5%A4%8D",target:"_blank",rel:"noopener noreferrer"}},[t._v("开始恢复"),a("OutboundLink")],1)])])]),t._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/guanhui07/blog/issues/392#%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93",target:"_blank",rel:"noopener noreferrer"}},[t._v("连接数据库"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/guanhui07/blog/issues/392#%E4%B8%80%E4%BA%9B%E5%B8%B8%E8%A7%84%E7%9B%AE%E5%BD%95",target:"_blank",rel:"noopener noreferrer"}},[t._v("一些常规目录"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/guanhui07/blog/issues/392#%E4%BD%BF%E7%94%A8https",target:"_blank",rel:"noopener noreferrer"}},[t._v("使用HTTPS"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/guanhui07/blog/issues/392#%E6%9A%B4%E5%8A%9B%E5%8D%87%E7%BA%A7",target:"_blank",rel:"noopener noreferrer"}},[t._v("暴力升级"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/guanhui07/blog/issues/392#%E4%BC%98%E5%8C%96%E5%86%85%E5%AD%98%E4%BD%BF%E7%94%A8",target:"_blank",rel:"noopener noreferrer"}},[t._v("优化内存使用"),a("OutboundLink")],1)]),t._v(" "),a("li",[t._v("错误处理\n"),a("ul",[a("li",[a("a",{attrs:{href:"https://github.com/guanhui07/blog/issues/392#%E8%A7%A3%E5%86%B380%E7%AB%AF%E5%8F%A3%E8%A2%AB%E5%8D%A0%E7%94%A8",target:"_blank",rel:"noopener noreferrer"}},[t._v("解决80端口被占用"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/guanhui07/blog/issues/392#%E5%A4%B4%E5%83%8F%E6%97%A0%E6%B3%95%E6%AD%A3%E5%B8%B8%E6%98%BE%E7%A4%BA",target:"_blank",rel:"noopener noreferrer"}},[t._v("头像无法正常显示"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/guanhui07/blog/issues/392#internal-api-unreachable",target:"_blank",rel:"noopener noreferrer"}},[t._v("internal API unreachable"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/guanhui07/blog/issues/392#proxy_temp-%E7%9B%AE%E5%BD%95%E6%B2%A1%E6%9C%89%E6%9D%83%E9%99%90",target:"_blank",rel:"noopener noreferrer"}},[t._v("proxy_temp 目录没有权限"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/guanhui07/blog/issues/392#webhooks-%E9%94%99%E8%AF%AF",target:"_blank",rel:"noopener noreferrer"}},[t._v("webhooks 错误"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/guanhui07/blog/issues/392#%E6%9C%8D%E5%8A%A1%E6%97%A0%E6%B3%95%E5%90%AF%E5%8A%A8",target:"_blank",rel:"noopener noreferrer"}},[t._v("服务无法启动"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/guanhui07/blog/issues/392#%E5%85%B6%E5%AE%83%E9%94%99%E8%AF%AF",target:"_blank",rel:"noopener noreferrer"}},[t._v("其它错误"),a("OutboundLink")],1)])])]),t._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/guanhui07/blog/issues/392#%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99",target:"_blank",rel:"noopener noreferrer"}},[t._v("参考资料"),a("OutboundLink")],1)])]),t._v(" "),a("h2",{attrs:{id:"官方安装"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#官方安装"}},[t._v("#")]),t._v(" 官方安装")]),t._v(" "),a("p",[t._v("下面是官网复制过来的官方安装方法，最简单的安装，在我大天朝，只能望天兴叹，你可翻墙安装或者略过这里，看下面的。")]),t._v(" "),a("ol",[a("li",[t._v("安装并配置必要的依赖项")])]),t._v(" "),a("p",[t._v("If you install Postfix to send email please select 'Internet Site' during setup. Instead of using Postfix you can also use Sendmail or configure a custom SMTP server and configure it as an SMTP server.")]),t._v(" "),a("p",[t._v("On Centos 6 and 7, the commands below will also open HTTP and SSH access in the system firewall.")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("sudo yum install curl openssh-server openssh-clients postfix cronie\nsudo service postfix start\nsudo chkconfig postfix on\nsudo lokkit -s http -s ssh\n")])])]),a("ol",[a("li",[t._v("添加gitlab服务器包和安装包")])]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("curl")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-sS")]),t._v(" https://packages.gitlab.com/install/repositories/gitlab/gitlab-ce/script.rpm.sh "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("bash")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" yum "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" gitlab-ce\n")])])]),a("p",[t._v("If you are not comfortable installing the repository through a piped script, you can find the entire script here and select and download the package manually and install using\n"),a("a",{attrs:{href:"https://packages.gitlab.com/gitlab/gitlab-ce",target:"_blank",rel:"noopener noreferrer"}},[t._v("gitlab/gitlab-ce"),a("OutboundLink")],1)]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("curl")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-LJO")]),t._v(" https://packages.gitlab.com/gitlab/gitlab-ce/packages/el/6/gitlab-ce-XXX.rpm/download\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("curl")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-LJO")]),t._v(" https://packages.gitlab.com/gitlab/gitlab-ce/packages/el/7/gitlab-ce-10.2.2-ce.0.el7.x86_64.rpm/download\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("rpm")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-i")]),t._v(" gitlab-ce-XXX.rpm\n")])])]),a("ol",[a("li",[t._v("配置并启动GitLab")])]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" gitlab-ctl reconfigure\n")])])]),a("ol",[a("li",[t._v("浏览器打开并登录")])]),t._v(" "),a("p",[t._v("On your first visit, you'll be redirected to a password reset screen to provide the password for the initial administrator account. Enter your desired password and you'll be redirected back to the login screen.")]),t._v(" "),a("p",[t._v("The default account's username is root. Provide the password you created earlier and login. After login you can change the username if you wish.")]),t._v(" "),a("h2",{attrs:{id:"第三方镜像安装"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第三方镜像安装"}},[t._v("#")]),t._v(" 第三方镜像安装")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://mirror.tuna.tsinghua.edu.cn/help/gitlab-ce/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Gitlab Community Edition 镜像使用帮助"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/hehongwei44/my-blog/issues/19",target:"_blank",rel:"noopener noreferrer"}},[t._v("在阿里云上通过Omnibus一键安装包安装Gitlab"),a("OutboundLink")],1)])]),t._v(" "),a("h3",{attrs:{id:"编辑源"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#编辑源"}},[t._v("#")]),t._v(" 编辑源")]),t._v(" "),a("p",[t._v("新建 /etc/yum.repos.d/gitlab-ce.repo，内容为")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://mirror.tuna.tsinghua.edu.cn/help/gitlab-ce/",target:"_blank",rel:"noopener noreferrer"}},[t._v("使用清华大学 TUNA 镜像源"),a("OutboundLink")],1),t._v(" 打开网址将内容复制到"),a("code",[t._v("gitlab-ce.repo")]),t._v("文件中，编辑路径"),a("code",[t._v("vim /etc/yum.repos.d/gitlab-ce.repo")])]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("gitlab-ce"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("gitlab-ce\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("baseurl")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("http://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el6\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("repo_gpgcheck")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("gpgcheck")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("enabled")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("gpgkey")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("https://packages.gitlab.com/gpg.key\n")])])]),a("h3",{attrs:{id:"更新本地yum缓存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#更新本地yum缓存"}},[t._v("#")]),t._v(" 更新本地YUM缓存")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" yum makecache\n")])])]),a("h3",{attrs:{id:"安装社区版"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#安装社区版"}},[t._v("#")]),t._v(" 安装社区版")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" yum "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" gitlab-ce "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#(自动安装最新版)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" yum "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" gitlab-ce-8.15.2-ce.0.el6 "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#(安装指定版本)")]),t._v("\n")])])]),a("h3",{attrs:{id:"更改配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#更改配置"}},[t._v("#")]),t._v(" 更改配置")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("vim")]),t._v(" /etc/gitlab/gitlab.rb\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 找到 external_url 'http://000.00.00.00:8081'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 修改成你的地址")]),t._v("\n")])])]),a("h3",{attrs:{id:"配置并启动gitlab"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#配置并启动gitlab"}},[t._v("#")]),t._v(" 配置并启动GitLab")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 打开`/etc/gitlab/gitlab.rb`,")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 将`external_url = 'http://git.example.com'`修改为自己的IP地址：`http://xxx.xx.xxx.xx`，")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 然后执行下面的命令，对GitLab进行编译。")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" gitlab-ctl reconfigure\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 清除缓存")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" gitlab-rake cache:clear "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("RAILS_ENV")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("production\n")])])]),a("h3",{attrs:{id:"登录gitlab"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#登录gitlab"}},[t._v("#")]),t._v(" 登录GitLab")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("Username: root \nPassword: 5iveL"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("fe\n")])])]),a("h2",{attrs:{id:"docker安装"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#docker安装"}},[t._v("#")]),t._v(" Docker安装")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/jaywcjlove/docker-tutorial/blob/master/gitlab.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("Docker 安装 Gitlab 教程"),a("OutboundLink")],1)]),t._v(" "),a("h2",{attrs:{id:"卸载"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#卸载"}},[t._v("#")]),t._v(" 卸载")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" gitlab-ctl uninstall\n")])])]),a("h2",{attrs:{id:"运维"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#运维"}},[t._v("#")]),t._v(" 运维")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 修改默认的配置文件")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("vim")]),t._v(" /etc/gitlab/gitlab.rb\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看版本")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("cat")]),t._v(" /opt/gitlab/embedded/service/gitlab-rails/VERSION\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# echo "vm.overcommit_memory=1" >> /etc/sysctl.conf')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# sysctl -p")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# echo never > /sys/kernel/mm/transparent_hugepage/enabled")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 检查gitlab")]),t._v("\ngitlab-rake gitlab:check "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("SANITIZE")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("true "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--trace")]),t._v("\ngitlab-rake gitlab:check\ngitlab-rake gitlab:check "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("SANITIZE")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("true\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看日志")]),t._v("\ngitlab-ctl "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("tail")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 数据库关系升级")]),t._v("\ngitlab-rake db:migrate\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 清理缓存")]),t._v("\ngitlab-rake cache:clear\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 更新gitlab包")]),t._v("\nyum update gitlab-ce\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 升级gitlab")]),t._v("\nyum "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" gitlab-ce\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 升级数据命令")]),t._v("\ngitlab-ctl pg-upgrade\n")])])]),a("h3",{attrs:{id:"服务管理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#服务管理"}},[t._v("#")]),t._v(" 服务管理")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("gitlab-ctl start # 启动所有 gitlab 组件：\ngitlab-ctl stop  # 停止所有 gitlab 组件：\ngitlab-ctl stop postgresql # 停止所有 gitlab postgresql 组件：\n# 停止相关数据连接服务\ngitlab-ctl stop unicorn\ngitlab-ctl stop sidekiq\ngitlab-ctl restart # 重启所有 gitlab 组件：\ngitlab-ctl restart gitlab-workhorse # 重启所有 gitlab gitlab-workhorse 组件：\ngitlab-ctl status # 查看服务状态\ngitlab-ctl reconfigure # 生成配置启动服务\n")])])]),a("h3",{attrs:{id:"日志查看"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#日志查看"}},[t._v("#")]),t._v(" 日志查看")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" gitlab-ctl "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("tail")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看日志")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" gitlab-ctl "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("tail")]),t._v(" redis "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 检查redis的日志")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" gitlab-ctl "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("tail")]),t._v(" postgresql       "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 检查postgresql的日志")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" gitlab-ctl "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("tail")]),t._v(" gitlab-workhorse "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 检查gitlab-workhorse的日志")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" gitlab-ctl "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("tail")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("logrotate")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 检查logrotate的日志")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" gitlab-ctl "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("tail")]),t._v(" nginx    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 检查nginx的日志")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" gitlab-ctl "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("tail")]),t._v(" sidekiq  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 检查sidekiq的日志")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" gitlab-ctl "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("tail")]),t._v(" unicorn  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 检查unicorn的日志")]),t._v("\n")])])]),a("h3",{attrs:{id:"汉化gitlab"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#汉化gitlab"}},[t._v("#")]),t._v(" 汉化gitlab")]),t._v(" "),a("ul",[a("li",[t._v("1.克隆汉化补丁仓库")])]),t._v(" "),a("div",{staticClass:"language-sehll extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git clone https://gitlab.com/xhang/gitlab.git\n")])])]),a("ul",[a("li",[t._v("2.查看当前gitlab版本并且获取对应版本的中文补丁")])]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("head")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-1")]),t._v(" /opt/gitlab/version-manifest.txt\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#当然，我们安装的是gitlab-ce 10.8.4版")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("cd")]),t._v(" gitlab\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("diff")]),t._v(" v10.8.4 v10.8.4-zh  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("/v10.8.4-zh.diff\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#进入刚才clone下来的gitlab目录")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#用diff将英文原版与中文版的对比生成.diff文件")]),t._v("\n")])])]),a("ul",[a("li",[t._v("3.将中文补丁导入gitlab")])]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("gitlab-ctl stop\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#停止gitlab")]),t._v("\n\npatch "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-d")]),t._v(" /opt/gitlab/embedded/service/gitlab-rails "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-p1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("/v10.8.4-zh.diff\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#将刚才的diff文件做为补丁导入到gitlab中")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#patch可能需要自行安装:yum install -y patch")]),t._v("\n\ngitlab-ctl start\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#启动gitlab就能看到熟悉的中文啦！")]),t._v("\n")])])]),a("h3",{attrs:{id:"重置管理员密码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#重置管理员密码"}},[t._v("#")]),t._v(" 重置管理员密码")]),t._v(" "),a("p",[t._v("Gitlab管理员密码忘记，怎么重置密码，Gitlab 修改root用户密码，"),a("a",{attrs:{href:"http://docs.gitlab.com/ce/security/reset_root_password.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("How to reset your root password"),a("OutboundLink")],1),t._v("。")]),t._v(" "),a("p",[t._v("使用rails工具打开终端")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("sudo gitlab-rails console production\n")])])]),a("p",[t._v("查询用户的email，用户名，密码等信息，id:1 表示root账号")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("user = User.where(id: 1).first\n")])])]),a("p",[t._v("重新设置密码")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("user.password = '新密码'\nuser.password_confirmation = '新密码'　\n")])])]),a("p",[t._v("保存密码")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("user.save!\n")])])]),a("p",[t._v("完整的操作ruby脚本")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("user = User.where(id: 1).first\nuser.password = '新密码'\nuser.password_confirmation = '新密码'\nuser.save!\n")])])]),a("h2",{attrs:{id:"备份恢复"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#备份恢复"}},[t._v("#")]),t._v(" 备份恢复")]),t._v(" "),a("p",[t._v("使用Gitlab一键安装包安装Gitlab非常简单, 同样的备份恢复与迁移也非常简单,用一条命令即可创建完整的Gitlab备份:")]),t._v(" "),a("h3",{attrs:{id:"修改备份文件默认目录"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#修改备份文件默认目录"}},[t._v("#")]),t._v(" 修改备份文件默认目录")]),t._v(" "),a("p",[t._v("修改"),a("code",[t._v("/etc/gitlab/gitlab.rb")]),t._v("来修改默认存放备份文件的目录:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("gitlab_rails['backup_path'] = '/mnt/backups'  \n")])])]),a("h3",{attrs:{id:"创建备份"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#创建备份"}},[t._v("#")]),t._v(" 创建备份")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("gitlab-rake gitlab:backup:create\n")])])]),a("p",[t._v("以上命令将在 "),a("code",[t._v("/var/opt/gitlab/backups")]),t._v(" 目录下创建一个名称类似为xxxxxxxx_gitlab_backup.tar的压缩包, 这个压缩包就是Gitlab整个的完整部分, 其中开头的xxxxxx是备份创建的时间戳。")]),t._v(" "),a("p",[t._v("修改后使用gitlab-ctl reconfigure命令重载配置文件。")]),t._v(" "),a("h3",{attrs:{id:"开始备份"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#开始备份"}},[t._v("#")]),t._v(" 开始备份")]),t._v(" "),a("p",[t._v("这里放你的备份文件文件夹，和仓库源文件。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("/var/opt/gitlab/backups                   # 备份文件文件夹\n/var/opt/gitlab/git-data/repositories     # git仓库源文件\n")])])]),a("h3",{attrs:{id:"自动备份"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#自动备份"}},[t._v("#")]),t._v(" 自动备份")]),t._v(" "),a("p",[t._v("通过crontab使用备份命令实现自动备份")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("crontab -e\n# 每天2点备份gitlab数据\n0 2 * * * /usr/bin/gitlab-rake gitlab:backup:create\n0 2 * * * /opt/gitlab/bin/gitlab-rake gitlab:backup:create\n")])])]),a("p",[t._v("上面两行保存之后，重新载入配置")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("service crond reload\n# or\nsystemctl reload crond.service\n")])])]),a("h3",{attrs:{id:"备份保留七天"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#备份保留七天"}},[t._v("#")]),t._v(" 备份保留七天")]),t._v(" "),a("p",[t._v("设置只保存最近7天的备份，编辑 /etc/gitlab/gitlab.rb 配置文件，找到如下代码，删除注释 "),a("code",[t._v("#")]),t._v(" 保存")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("# /etc/gitlab/gitlab.rb 配置文件 修改下面这一行\ngitlab_rails['backup_keep_time'] = 604800  \n")])])]),a("p",[t._v("重新加载gitlab配置文件")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("sudo gitlab-ctl reconfigure  \n")])])]),a("h3",{attrs:{id:"开始恢复"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#开始恢复"}},[t._v("#")]),t._v(" 开始恢复")]),t._v(" "),a("p",[t._v("迁移如同备份与恢复的步骤一样, 只需要将老服务器 "),a("code",[t._v("/var/opt/gitlab/backups")]),t._v(" 目录下的备份文件拷贝到新服务器上的 "),a("code",[t._v("/var/opt/gitlab/backups")]),t._v(" 即可(如果你没修改过默认备份目录的话)。 然后执行恢复命令。\n如果修改了，首先进入备份 gitlab 的目录，这个目录是配置文件中的 "),a("code",[t._v("gitlab_rails['backup_path']")]),t._v(" ，默认为 "),a("code",[t._v("/var/opt/gitlab/backups")]),t._v(" 。")]),t._v(" "),a("p",[t._v("然后停止 unicorn 和 sidekiq ，保证数据库没有新的连接，不会有写数据情况。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("# 停止相关数据连接服务\ngitlab-ctl stop unicorn\n# ok: down: unicorn: 0s, normally up\ngitlab-ctl stop sidekiq\n# ok: down: sidekiq: 0s, normally up\n\n# 从xxxxx编号备份中恢复\n# 然后恢复数据，1406691018为备份文件的时间戳\ngitlab-rake gitlab:backup:restore BACKUP=1406691018\n\n# 新版本 1483533591_2017_01_04_gitlab_backup.tar\ngitlab-rake gitlab:backup:restore BACKUP=1483533591_2017_01_04_gitlab_backup.tar\n\n# 启动Gitlab\nsudo gitlab-ctl start  \n")])])]),a("p",[t._v("判断是执行实际操作的gitlab相关用户：git，没有得到足够的权限。依次执行命令：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("# 恢复过程中没有权限\nmkdir /var/opt/gitlab/backups\nchown git /var/opt/gitlab/backups\nchmod 700 /var/opt/gitlab/backups\n\n# 恢复成功页面报没有权限的错误\nsudo chown -R git:git /var/opt/gitlab/git-data/repositories\nsudo chmod -R ug+rwX,o-rwx /var/opt/gitlab/git-data/repositories\nsudo chmod -R ug-s /var/opt/gitlab/git-data/repositories\nsudo find /var/opt/gitlab/git-data/repositories -type d -print0 | sudo xargs -0 chmod g+s\n")])])]),a("p",[t._v("如果备份文件报没有权限，通过"),a("code",[t._v("ls -al")]),t._v("查看权限是不是"),a("code",[t._v("git")]),t._v("，而不是"),a("code",[t._v("root")]),t._v("，通过下面方式给"),a("code",[t._v("git")]),t._v("用户权限")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("sudo chown -R git:git 1483533591_2017_01_04_gitlab_backup.tar\n")])])]),a("h2",{attrs:{id:"连接数据库"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#连接数据库"}},[t._v("#")]),t._v(" 连接数据库")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("# 登陆gitlab的安装服务查看配置文件\ncat /var/opt/gitlab/gitlab-rails/etc/database.yml \n\nvim /var/opt/gitlab/postgresql/data/postgresql.conf\n# listen_addresses = '192.168.1.125' # 修改监听地址为ip\n# 或者改为 \"*\"\n")])])]),a("p",[t._v("修改 "),a("code",[t._v("pg_hba.conf")]),t._v(" 配置")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("vim  /var/opt/gitlab/postgresql/data/pg_hba.conf\n# 将下面这一行添加到配置的最后面\n# host    all    all    0.0.0.0/0    trust\n")])])]),a("p",[t._v("如果不希望允许所有IP远程访问，则可以将上述配置项中的0.0.0.0设定为特定的IP值。")]),t._v(" "),a("p",[t._v("重启 "),a("code",[t._v("postgresql")]),t._v(" 数据库")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("gitlab-ctl restart postgresql\n")])])]),a("p",[t._v("查看 "),a("code",[t._v("/etc/passwd")]),t._v(" 文件里边 "),a("code",[t._v("gitlab")]),t._v(" 对应的系统用户")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("[root@localhost ~]$ cat /etc/passwd\n...\ngitlab-psql:x:493:490::/var/opt/gitlab/postgresql:/bin/sh  # gitlab的postgresql用户\n")])])]),a("h2",{attrs:{id:"一些常规目录"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一些常规目录"}},[t._v("#")]),t._v(" 一些常规目录")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("# 配置目录\n/etc/gitlab/gitlab.rb\n# 生成好的nginx配置\n/var/opt/gitlab/nginx/conf/gitlab-http.conf\n# 备份目录\n/var/opt/gitlab/backups\n")])])]),a("h2",{attrs:{id:"使用https"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用https"}},[t._v("#")]),t._v(" 使用HTTPS")]),t._v(" "),a("p",[t._v("直接将nginx配置复制到你自己的nginx配置中，停掉gitlab的nginx")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("cp /var/opt/gitlab/nginx/conf/gitlab-http.conf /usr/local/nginx/conf/vhost/\n")])])]),a("p",[t._v("将你的SSL证书配置复制进去")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("server {\n  listen 443 ssl;\n  server_name  g.doman.cn;\n  ssl_certificate /etc/letsencrypt/live/*****/certificate.crt;\n  ssl_certificate_key /etc/letsencrypt/live/*****/private.key;\n  # .....\n}\n")])])]),a("p",[t._v("编辑"),a("code",[t._v("vi /usr/local/nginx/conf/nginx.conf")]),t._v("你的nginx配置，引用你复制过来的配置。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("http {\n  # .....\n  include vhost/gitlab-http.conf;\n}\n")])])]),a("p",[t._v("同时要把"),a("code",[t._v("/var/opt/gitlab/nginx/conf/nginx.conf")]),t._v("中的一些变量复制到自己的nginx配置中"),a("code",[t._v("nginx.conf")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('http {\n  # .....\n  log_format gitlab_access \'$remote_addr - $remote_user [$time_local] "$request_method $filtered_request_uri $server_protocol" $status $body_bytes_sent "$filtered_http_referer" "$http_user_agent"\';\n  log_format gitlab_mattermost_access \'$remote_addr - $remote_user [$time_local] "$request_method $filtered_request_uri $server_protocol" $status $body_bytes_sent "$filtered_http_referer" "$http_user_agent"\';\n\n  proxy_cache_path proxy_cache keys_zone=gitlab:10m max_size=1g levels=1:2;\n  proxy_cache gitlab;\n  map $http_upgrade $connection_upgrade {\n      default upgrade;\n      \'\'      close;\n  }\n\n  # Remove private_token from the request URI\n  # In:  /foo?private_token=unfiltered&authenticity_token=unfiltered&rss_token=unfiltered&...\n  # Out: /foo?private_token=[FILTERED]&authenticity_token=unfiltered&rss_token=unfiltered&...\n  map $request_uri $temp_request_uri_1 {\n    default $request_uri;\n    ~(?i)^(?<start>.*)(?<temp>[\\?&]private[\\-_]token)=[^&]*(?<rest>.*)$ "$start$temp=[FILTERED]$rest";\n  }\n  # Remove authenticity_token from the request URI\n  # In:  /foo?private_token=[FILTERED]&authenticity_token=unfiltered&rss_token=unfiltered&...\n  # Out: /foo?private_token=[FILTERED]&authenticity_token=[FILTERED]&rss_token=unfiltered&...\n  map $temp_request_uri_1 $temp_request_uri_2 {\n    default $temp_request_uri_1;\n    ~(?i)^(?<start>.*)(?<temp>[\\?&]authenticity[\\-_]token)=[^&]*(?<rest>.*)$ "$start$temp=[FILTERED]$rest";\n  }\n  # Remove rss_token from the request URI\n  # In:  /foo?private_token=[FILTERED]&authenticity_token=[FILTERED]&rss_token=unfiltered&...\n  # Out: /foo?private_token=[FILTERED]&authenticity_token=[FILTERED]&rss_token=[FILTERED]&...\n  map $temp_request_uri_2 $filtered_request_uri {\n    default $temp_request_uri_2;\n    ~(?i)^(?<start>.*)(?<temp>[\\?&]rss[\\-_]token)=[^&]*(?<rest>.*)$ "$start$temp=[FILTERED]$rest";\n  }\n  # A version of the referer without the query string\n  map $http_referer $filtered_http_referer {\n    default $http_referer;\n    ~^(?<temp>.*)\\? $temp;\n  }\n}\n')])])]),a("h2",{attrs:{id:"暴力升级"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#暴力升级"}},[t._v("#")]),t._v(" 暴力升级")]),t._v(" "),a("p",[t._v("暴力升级前先备份，然后停止所有服务运行，记得备份的良好习惯")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("gitlab-ctl stop  # 停止所有 gitlab 组件：\n# 更新gitlab包\nyum update gitlab-ce\n")])])]),a("p",[t._v("直接编辑源 /etc/yum.repos.d/gitlab-ce.repo，安装 GitLab 社区版")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("yum list gitlab-ce # 查看版本\nsudo yum install gitlab-ce #(自动安装最新版)\nsudo yum install gitlab-ce-8.15.2-ce.0.el6 #(安装指定版本)\n")])])]),a("p",[t._v("注意："),a("code",[t._v("10.7")]),t._v(" 版本升级到 "),a("code",[t._v("11.x")]),t._v(" 版本需要先升级到 "),a("code",[t._v("10.8")]),t._v(" 版本")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("# 安装指定版本 10.8 的版本\nsudo yum install gitlab-ce-10.8.0-ce.0.el6\n")])])]),a("p",[t._v("安装完成记得将所有服务启起来哦")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("gitlab-ctl start # 启动所有数据库\n# postgresql 数据库如果启动不了，通过重启启动\ngitlab-ctl restart postgresql\n")])])]),a("p",[t._v("安装过如果报错，查看提示根据提示操作，版本跨度太大会报错哦。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('gitlab preinstall: Automatically backing up only the GitLab SQL database (excluding everything else!)\nDumping database ...\nDumping PostgreSQL database gitlabhq_production ... pg_dump: [archiver (db)] connection to database "gitlabhq_production" failed: could not connect to server: 没有那个文件或目录\n    Is the server running locally and accepting\n    connections on Unix domain socket "/var/opt/gitlab/postgresql/.s.PGSQL.5432"?\nBackup failed\n[FAILED]\ngitlab preinstall:\ngitlab preinstall: Backup failed! If you want to skip this backup, run the following command and\ngitlab preinstall: try again:\ngitlab preinstall:\ngitlab preinstall:   sudo touch /etc/gitlab/skip-auto-migrations\ngitlab preinstall:\nerror: %pre(gitlab-ce-8.15.2-ce.0.el6.x86_64) scriptlet failed, exit status 1\nError in PREIN scriptlet in rpm package gitlab-ce-8.15.2-ce.0.el6.x86_64\nerror:   install: %pre scriptlet failed (2), skipping gitlab-ce-8.15.2-ce.0.el6\ngitlab-ce-8.11.5-ce.0.el6.x86_64 was supposed to be removed but is not!\n  Verifying  : gitlab-ce-8.11.5-ce.0.el6.x86_64                                                                                                                                                             1/2\n  Verifying  : gitlab-ce-8.15.2-ce.0.el6.x86_64                                                                                                                                                             2/2\n\nFailed:\n  gitlab-ce.x86_64 0:8.11.5-ce.0.el6\n')])])]),a("p",[t._v("看上面一堆错误，瞬间就懵逼了，看到一条救星命令让我尝试运行 "),a("code",[t._v("sudo touch /etc/gitlab/skip-auto-migrations")]),t._v(" 于是我二逼的重新"),a("code",[t._v("yum install gitlab-ce")]),t._v("运行了，结果真的安装成功了，😄。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("# 重新安装命令\nyum reinstall gitlab-ce\n# or\nyum install gitlab-ce\n...\ngitlab: Thank you for installing GitLab!\ngitlab: To configure and start GitLab, RUN THE FOLLOWING COMMAND:\n\nsudo gitlab-ctl reconfigure\n\ngitlab: GitLab should be reachable at http://114.55.148.71:8081\ngitlab: Otherwise configure GitLab for your system by editing /etc/gitlab/gitlab.rb file\ngitlab: And running reconfigure again.\ngitlab:\ngitlab: For a comprehensive list of configuration options please see the Omnibus GitLab readme\ngitlab: https://gitlab.com/gitlab-org/omnibus-gitlab/blob/master/README.md\ngitlab:\n\ngitlab: GitLab now ships with a newer version of PostgreSQL (9.6.1), and will be used\ngitlab: as the default in the next major relase. To upgrade, RUN THE FOLLOWING COMMANDS:\n\nsudo gitlab-ctl pg-upgrade\n\ngitlab: For more details, please see:\ngitlab: https://docs.gitlab.com/omnibus/settings/database.html#upgrade-packaged-postgresql-server\ngitlab:\n  清理       : gitlab-ce-8.11.5-ce.0.el6.x86_64                                                                                                                                                             2/2\nFound /etc/gitlab/skip-auto-migrations, exiting...\n  Verifying  : gitlab-ce-8.15.2-ce.0.el6.x86_64                                                                                                                                                             1/2\n  Verifying  : gitlab-ce-8.11.5-ce.0.el6.x86_64                                                                                                                                                             2/2\n\n更新完毕:\n  gitlab-ce.x86_64 0:8.15.2-ce.0.el6\n\n完毕！\n")])])]),a("p",[t._v("重启配置，可以解决大部分"),a("code",[t._v("502")]),t._v("错误。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("gitlab-ctl reconfigure\n")])])]),a("h2",{attrs:{id:"优化内存使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#优化内存使用"}},[t._v("#")]),t._v(" 优化内存使用")]),t._v(" "),a("p",[t._v("修改配置文件 "),a("code",[t._v("/etc/gitlab/gitlab.rb")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("# 减少 postgresql 数据库缓存\npostgresql['shared_buffers'] = \"256MB\"\n# 减少sidekiq的并发数\nsidekiq['concurrency'] = 1\n\n# worker进程数\npostgresql['max_worker_processes'] = 4\n\nunicorn['worker_processes'] = 2  ## worker进程数\nunicorn['worker_memory_limit_min'] = \"400 * 1 << 20\" ##worker最小内存\nunicorn['worker_memory_limit_max'] = \"650 * 1 << 20\" ##worker最大内存\n")])])]),a("h2",{attrs:{id:"错误处理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#错误处理"}},[t._v("#")]),t._v(" 错误处理")]),t._v(" "),a("h3",{attrs:{id:"解决80端口被占用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#解决80端口被占用"}},[t._v("#")]),t._v(" 解决80端口被占用")]),t._v(" "),a("p",[t._v("nginx配置解决 "),a("code",[t._v("80")]),t._v(" 端口被占用")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("upstream gitlab {\n     server 114.55.111.111:8081 ;\n}\nserver {\n  # 侦听的80端口\n  listen       80;\n  server_name  git.diggg.cn;\n  location / {\n    proxy_pass   http://gitlab;    #在这里设置一个代理，和upstream的名字一样\n    #以下是一些反向代理的配置可删除\n    proxy_redirect             off;\n    #后端的Web服务器可以通过X-Forwarded-For获取用户真实IP\n    proxy_set_header           Host $host;\n    proxy_set_header           X-Real-IP $remote_addr;\n    proxy_set_header           X-Forwarded-For $proxy_add_x_forwarded_for;\n    client_max_body_size       10m; #允许客户端请求的最大单文件字节数\n    client_body_buffer_size    128k; #缓冲区代理缓冲用户端请求的最大字节数\n    proxy_connect_timeout      300; #nginx跟后端服务器连接超时时间(代理连接超时)\n    proxy_send_timeout         300; #后端服务器数据回传时间(代理发送超时)\n    proxy_read_timeout         300; #连接成功后，后端服务器响应时间(代理接收超时)\n    proxy_buffer_size          4k; #设置代理服务器（nginx）保存用户头信息的缓冲区大小\n    proxy_buffers              4 32k; #proxy_buffers缓冲区，网页平均在32k以下的话，这样设置\n    proxy_busy_buffers_size    64k; #高负荷下缓冲大小（proxy_buffers*2）\n    proxy_temp_file_write_size 64k; #设定缓存文件夹大小，大于这个值，将从upstream服务器传\n  }\n}\n")])])]),a("p",[t._v("nginx配置检查和立即生效")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("# 检查配置\n/usr/local/nginx/sbin/nginx -tc conf/nginx.conf\n# nginx 重新加载配置\n/usr/local/nginx/sbin/nginx -s reload\n")])])]),a("h3",{attrs:{id:"头像无法正常显示"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#头像无法正常显示"}},[t._v("#")]),t._v(" 头像无法正常显示")]),t._v(" "),a("p",[t._v("原因：gravatar被墙\n解决办法：\n编辑 /etc/gitlab/gitlab.rb，将")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("# gitlab_rails['gravatar_plain_url'] = 'http://gravatar.duoshuo.com/avatar/%{hash}?s=%{size}&d=identicon'\n")])])]),a("p",[t._v("修改为：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("gitlab_rails['gravatar_plain_url'] = 'http://gravatar.duoshuo.com/avatar/%{hash}?s=%{size}&d=identicon'\n")])])]),a("p",[t._v("然后在命令行执行：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("sudo gitlab-ctl reconfigure \nsudo gitlab-rake cache:clear RAILS_ENV=production\n")])])]),a("h3",{attrs:{id:"internal-api-unreachable"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#internal-api-unreachable"}},[t._v("#")]),t._v(" internal API unreachable")]),t._v(" "),a("p",[t._v("这个错误是一个自己制造的坑，我克隆和提交都没有办法搞，但是网站能正常运行，尝试了非常多的方法，最终我的问题是"),a("code",[t._v("22")]),t._v("端口没有隐射出去，好尴尬。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("GitLab: Failed to authorize your Git request: internal API unreachable\n")])])]),a("p",[t._v("解决办法："),a("a",{attrs:{href:"https://gitlab.com/gitlab-org/gitlab-ce/issues/33702",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://gitlab.com/gitlab-org/gitlab-ce/issues/33702"),a("OutboundLink")],1),t._v("\n通过防火墙规则 127.0.0.1")]),t._v(" "),a("h3",{attrs:{id:"proxy-temp-目录没有权限"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#proxy-temp-目录没有权限"}},[t._v("#")]),t._v(" proxy_temp 目录没有权限")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('[crit] 14788#0: *215 open() "/usr/local/nginx/proxy_temp/5/01/0000000015" failed (13: Permission denied) while reading upstream\n')])])]),a("p",[t._v("以下方式解决")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("chown -R root:root /usr/local/nginx/proxy_temp\n# 编辑 nginx.conf\nsudo vi /usr/local/nginx/conf/nginx.conf\n# 在第一行添加\nuser root;\n")])])]),a("h3",{attrs:{id:"webhooks-错误"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#webhooks-错误"}},[t._v("#")]),t._v(" webhooks 错误")]),t._v(" "),a("p",[t._v("错误显示不允许发送本地请求")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("Url is blocked: Requests to the local network are not allowed\n")])])]),a("p",[t._v("解决方法，在设置中设置允许本地连接即可")]),t._v(" "),a("blockquote",[a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("admin` => `Settings` => `Outbound requests\n")])])])]),t._v(" "),a("h3",{attrs:{id:"服务无法启动"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#服务无法启动"}},[t._v("#")]),t._v(" 服务无法启动")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("[root@localhost gitlab]# gitlab-ctl status\nfail: alertmanager: runsv not running\nfail: gitaly: runsv not running\nfail: gitlab-monitor: runsv not running\nfail: gitlab-workhorse: runsv not running\nfail: logrotate: runsv not running\nfail: nginx: runsv not running\nfail: node-exporter: runsv not running\nfail: postgres-exporter: runsv not running\nfail: postgresql: runsv not running\nfail: prometheus: runsv not running\nfail: redis: runsv not running\nfail: redis-exporter: runsv not running\nfail: sidekiq: runsv not running\nfail: unicorn: runsv not running\n")])])]),a("p",[a("a",{attrs:{href:"https://gitlab.com/gitlab-org/omnibus-gitlab/issues/272",target:"_blank",rel:"noopener noreferrer"}},[t._v("Omnibus gitlab do not restart on CentOS7"),a("OutboundLink")],1),t._v("\n开机自动启动服务")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("[root@localhost ~]# systemctl status gitlab-runsvdir.service -l\n● gitlab-runsvdir.service - GitLab Runit supervision process\n   Loaded: loaded (/usr/lib/systemd/system/gitlab-runsvdir.service; enabled; vendor preset: disabled)\n   Active: inactive (dead)\n")])])]),a("p",[t._v("如果 "),a("code",[t._v("gitlab-runsvdir.service")]),t._v(" 服务没有响应，你可能要看一下内存是否满了，需要释放内存，老的版本需要 2G 内存，新版本需要至少 4G 内存。")]),t._v(" "),a("h3",{attrs:{id:"其它错误"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#其它错误"}},[t._v("#")]),t._v(" 其它错误")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("Error executing action `run` on resource 'bash[migrate gitlab-rails database]'\n")])])]),a("p",[t._v("上面错误是数据库没有启动，我不知道如何启动，我重启了服务器，然后好球了。😆\n"),a("d")],1),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('NameError: uninitialized constant Devise::Async\nProcessing by RootController#index as HTML\nCompleted 401 Unauthorized in 17ms (ActiveRecord: 2.7ms)\n/var/log/gitlab/nginx/gitlab_access.log <==\n114.55.148.71 - - [04/Jan/2017:17:20:24 +0800] "GET /favicon.ico HTTP/1.0" 502 2662 "http://git.xxxxx.cn/" "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/55.0.2883.95 Safari/537.36"\n')])])]),a("h2",{attrs:{id:"参考资料"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[t._v("#")]),t._v(" 参考资料")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://packages.gitlab.com/gitlab/gitlab-ce",target:"_blank",rel:"noopener noreferrer"}},[t._v("gitlab/gitlab-ce"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://www.gitlab.cc/downloads",target:"_blank",rel:"noopener noreferrer"}},[t._v("官网下载"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://doc.gitlab.cc/ce/install/requirements.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("官网安装说明"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://www.gitlab.cc/features/#enterprise",target:"_blank",rel:"noopener noreferrer"}},[t._v("开源版本和企业版本对比"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://gitlab.com/gitlab-org/gitlab-ce/blob/master/doc/update/8.14-to-8.15.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("官方升级Gitlab教程"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://gitlab.com/gitlab-org/gitlab-recipes/tree/master/install/centos",target:"_blank",rel:"noopener noreferrer"}},[t._v("官方Centos安装Gitlab教程"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"http://opjasee.com/2016/01/28/gitlab-upgrade.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Gitlab升级记录"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"http://www.yuzhewo.com/2015/11/03/%E4%BF%AE%E6%94%B9gitlab%E4%BD%BF%E7%94%A8%E7%8E%B0%E6%9C%89nginx%E6%9C%8D%E5%8A%A1%E5%8F%8A502%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/",target:"_blank",rel:"noopener noreferrer"}},[t._v("修改gitlab使用现有nginx服务及502问题解决"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"http://blog.csdn.net/wangxicoding/article/details/43738137",target:"_blank",rel:"noopener noreferrer"}},[t._v("我所遇到的GitLab 502问题的解决"),a("OutboundLink")],1)])])])}),[],!1,null,null,null);a.default=r.exports}}]);