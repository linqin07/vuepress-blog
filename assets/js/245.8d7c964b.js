(window.webpackJsonp=window.webpackJsonp||[]).push([[245],{638:function(t,e,a){"use strict";a.r(e);var s=a(20),r=Object(s.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h6",{attrs:{id:"_1-数据库事务的四大特性以及事务的隔离级别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-数据库事务的四大特性以及事务的隔离级别"}},[t._v("#")]),t._v(" 1.数据库事务的四大特性以及事务的隔离级别")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("原子性")]),t._v("：要么全部成功，要么全部失败回滚")]),t._v(" "),e("li",[e("code",[t._v("一致性")]),t._v("：比如两个用户转钱，无论怎么转，最后总额肯定一样。")]),t._v(" "),e("li",[e("code",[t._v("隔离性")]),t._v("：多个线程操作后台会隔离")]),t._v(" "),e("li",[e("code",[t._v("持久性")]),t._v("：事务完毕后哪怕数据库宕机重启后还是一样。")])]),t._v(" "),e("h6",{attrs:{id:"_2-事务的隔离级别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-事务的隔离级别"}},[t._v("#")]),t._v(" 2.事务的隔离级别")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("脏读")]),t._v("：一个事务读取另一个事务未提交的数据。")]),t._v(" "),e("li",[e("code",[t._v("不可重复读")]),t._v("：不可重复读是指在对于数据库中的某个数据，一个事务范围内多次查询却返回了不同的数据值，这是由于在查询间隔，被另一个事务修改并提交了。")]),t._v(" "),e("li",[e("code",[t._v("幻读")]),t._v("：幻读和不可重复读都是读取了另一条已经提交的事务（这点就脏读不同），所不同的是不可重复读查询的都是同一个数据项，而幻读针对的是一批数据整体（比如数据的个数，主要"),e("code",[t._v("针对新增")]),t._v("的数据）。")]),t._v(" "),e("li",[e("code",[t._v("序列化")]),t._v("：这是最高的隔离级别，它通过强制事务排序，使之不可能相互冲突，从而解决幻读问题。简言之，它是在每个读的数据行上加上共享锁。在这个级别，可能导致大量的超时现象和锁竞争。")])]),t._v(" "),e("h6",{attrs:{id:"_3-mysql数据库为我们提供的四种隔离级别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-mysql数据库为我们提供的四种隔离级别"}},[t._v("#")]),t._v(" 3.MySQL数据库为我们提供的四种隔离级别")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("① Serializable (串行化)：可避免脏读、不可重复读、幻读的发生。性能不好！")])]),t._v(" "),e("li",[e("p",[t._v("② Repeatable read (可重复读)：可避免脏读、不可重复读的发生。保证一个事务不能读取另一个事务未提交的数据。"),e("code",[t._v("(Mysql默认)，还会有幻读")])])]),t._v(" "),e("li",[e("p",[t._v("③ Read committed (读已提交)：可避免脏读的发生。（还会有幻读，可充复读）")])]),t._v(" "),e("li",[e("p",[t._v("④ Read uncommitted (读未提交)：最低级别，任何情况都无法保证。")])])]),t._v(" "),e("p",[t._v("查看 Mysql 数据库事务隔离级别")]),t._v(" "),e("div",{staticClass:"language-sql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sql"}},[e("code",[e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.")]),t._v("查看当前会话隔离级别\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" @"),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("@tx_isolation")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.")]),t._v("查看系统当前隔离级别\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" @"),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("@global.tx_isolation")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("3.")]),t._v("设置当前会话隔离级别\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("set")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("session")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("transaction")]),t._v(" isolatin "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("level")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("repeatable")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("read")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("4.")]),t._v("设置系统当前隔离级别\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("set")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("global")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("transaction")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("isolation")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("level")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("repeatable")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("read")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("h6",{attrs:{id:"_4-事务的传播级别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-事务的传播级别"}},[t._v("#")]),t._v(" 4.事务的传播级别")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("大概就是在一个事务内，对子方法的事务级别进行控制，如创建一个新的事务。")]),t._v(" "),e("blockquote",[e("p",[t._v("注意的是：动态代理给spring留下的坑！spring中使用都是无效的，需要创建上下文对象application执行子方法，或者使用aopContext代理，也或者是spring注入对象调用才生效。")])])])]),t._v(" "),e("h3",{attrs:{id:"锁"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#锁"}},[t._v("#")]),t._v(" 锁")]),t._v(" "),e("p",[t._v("性能上分类： 悲观锁、乐观锁")]),t._v(" "),e("p",[t._v("操作类型上：读锁、写锁")]),t._v(" "),e("p",[t._v("数据粒度上：表锁、行锁、页面锁\n行锁加在索引上，并且索引不能失效，不然有可能变表锁。for update 排他锁，lock in share mode 共享锁。")]),t._v(" "),e("p",[t._v("更细粒度：间隙锁、临键锁")]),t._v(" "),e("p",[t._v("间隙锁：针对两个值的范围之间进行加锁，如 ID 范围在（1，15] 之间，MVCC和行锁+间隙锁解决幻读。")]),t._v(" "),e("p",[t._v("临键锁：行锁和间隙锁的组合")]),t._v(" "),e("h3",{attrs:{id:"redo-log"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#redo-log"}},[t._v("#")]),t._v(" redo log")]),t._v(" "),e("p",[t._v("保证事务的原子性和持久性，避免内存中的脏数据写入数据表 IBD 文件，针对的是内存中数据页的修改操作。")]),t._v(" "),e("p",[t._v("执行sql，写入数据到内存中的 redo log buffer，根据一定规则写入磁盘 redo log，数据库故障时通过 redo log 进行恢复到 idb 文件。")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://blog-07.oss-cn-guangzhou.aliyuncs.com/picBak/image-20220210000236061.png",alt:"Redo Log buffer 写入到日志 redo log 示意图"}})]),t._v(" "),e("h4",{attrs:{id:"刷盘规则"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#刷盘规则"}},[t._v("#")]),t._v(" 刷盘规则")]),t._v(" "),e("p",[t._v("用户空间的 redo log buffer 写入磁盘 redo log 需要进过系统内核 os buffer，刷盘可以根据下面规则。")]),t._v(" "),e("ul",[e("li",[t._v("事务 commit 就刷盘")]),t._v(" "),e("li",[t._v("每秒都刷盘")]),t._v(" "),e("li",[t._v("log buffer 占用内存就刷盘")]),t._v(" "),e("li",[t._v("事务中存在检查点时。")])]),t._v(" "),e("h4",{attrs:{id:"redo-log写入规则"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#redo-log写入规则"}},[t._v("#")]),t._v(" redo log写入规则")]),t._v(" "),e("p",[t._v("把 redo buffer 的写入redo log 中，redo log 中存在两个东西，一个是 wirte pos 记录着数据表记录的位置，另一个是 check point 检查点负责擦除。存在间隔代表还可以继续记录新的操作。")]),t._v(" "),e("h4",{attrs:{id:"lsn"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#lsn"}},[t._v("#")]),t._v(" LSN")]),t._v(" "),e("p",[t._v("表示日志的逻辑序列号。")]),t._v(" "),e("h3",{attrs:{id:"undo-log"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#undo-log"}},[t._v("#")]),t._v(" undo log")]),t._v(" "),e("p",[t._v("用于回滚事务和多版本控制MVCC，记录逻辑日志，每次执行 sql 增加一条回滚 SQL 语句。比如新增语句 insert 时记录一条 delete 语句，执行 update 语句时记录一条反向的 update 语句。如果数据库崩溃，"),e("code",[t._v("先恢复 redo log")]),t._v(" 再恢复 undo log。")]),t._v(" "),e("h4",{attrs:{id:"mvcc-multi-version-concurrent-control"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#mvcc-multi-version-concurrent-control"}},[t._v("#")]),t._v(" MVCC（Multi-Version Concurrent Control）")]),t._v(" "),e("p",[t._v("MVCC叫做多版本并发控制，实际上就是保存了数据在某个时间节点的"),e("code",[t._v("快照")]),e("strong",[t._v("readView")]),t._v("。")]),t._v(" "),e("p",[t._v("我们每⾏数实际上隐藏了两列，创建时间版本号，过期(删除)时间版本号，每开始⼀个新的事务，版本号\n都会⾃动递增。查询 select 不会更新版本号，但是插入 insert，更新 update， 删除 delete 会更新版本号。")]),t._v(" "),e("h3",{attrs:{id:"binlog"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#binlog"}},[t._v("#")]),t._v(" binlog")]),t._v(" "),e("p",[t._v("mysql 自身的二进制日志，主要用于主从复制和数据恢复。一个事务的 binlog 是完整的不会插入其他事务的 binlog。")]),t._v(" "),e("p",[t._v("拥有3个记录模式：")]),t._v(" "),e("ul",[e("li",[t._v("row 模式\n每一行操作都记录，日志会很庞大")]),t._v(" "),e("li",[t._v("statement 模式\n不记录细节，只记录结果，有些 sql 如 now(), last_insert_id() 等会不一致。")]),t._v(" "),e("li",[t._v("混合模式\n上面两种结合")])]),t._v(" "),e("p",[t._v("binlog 和 redo log 的区别")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"center"}},[t._v("redolog")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("binlog")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("innodb特有")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("mysql本身就有")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("记录内存中的"),e("code",[t._v("数据页")]),t._v("修改")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("记录所有操作")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("先写缓存区，写入完成提交事务")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("每个sql写入内存缓存或者一个事务提交一次性写入内存缓存")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("循环写日志，通过记录检查点和write pos")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("一直追加写入")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("用于数据库崩溃自动恢复")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("用于主从和数据恢复")])])])])])}),[],!1,null,null,null);e.default=r.exports}}]);