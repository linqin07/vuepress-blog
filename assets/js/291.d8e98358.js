(window.webpackJsonp=window.webpackJsonp||[]).push([[291],{515:function(v,_,t){"use strict";t.r(_);var a=t(2),r=Object(a.a)({},(function(){var v=this,_=v.$createElement,t=v._self._c||_;return t("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[t("h2",{attrs:{id:"设计模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#设计模式","aria-hidden":"true"}},[v._v("#")]),v._v(" 设计模式")]),v._v(" "),t("p",[v._v("这里是对一些设计模式的总结。结合平时开发中的一些应用案例。")]),v._v(" "),t("h3",{attrs:{id:"创建型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#创建型","aria-hidden":"true"}},[v._v("#")]),v._v(" 创建型")]),v._v(" "),t("p",[v._v("单例模式：保证一个类只有一个实例，并提供一个访问它的全局访问方法。")]),v._v(" "),t("p",[v._v("抽象工厂模式：提供一个创建一系列相关依赖对象的接口，而无需指定他们的具体实现类。")]),v._v(" "),t("p",[v._v("工厂模式：定义一个用于创建对象的工厂接口，让子类决定实例化那个类。")]),v._v(" "),t("p",[v._v("建造者模式：将一个复杂的对象构建和它的表示分，使得同样的构建过程可以创建不同表示。")]),v._v(" "),t("p",[v._v("原型模式：复制原型创建新对象。")]),v._v(" "),t("h3",{attrs:{id:"结构型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#结构型","aria-hidden":"true"}},[v._v("#")]),v._v(" 结构型")]),v._v(" "),t("p",[v._v("适配器模式")]),v._v(" "),t("p",[v._v("装饰模式")]),v._v(" "),t("p",[v._v("外观模式")]),v._v(" "),t("p",[v._v("桥接模式")]),v._v(" "),t("p",[v._v("代理模式")]),v._v(" "),t("p",[v._v("组合模式: 表示对象的部分-整体层次结构")]),v._v(" "),t("p",[v._v("享元模式")]),v._v(" "),t("h3",{attrs:{id:"行为型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#行为型","aria-hidden":"true"}},[v._v("#")]),v._v(" 行为型")]),v._v(" "),t("p",[v._v("责任链模式")]),v._v(" "),t("p",[v._v("命令模式")]),v._v(" "),t("p",[v._v("解释器模式")]),v._v(" "),t("p",[v._v("迭代器模式")]),v._v(" "),t("p",[v._v("中介者模式")]),v._v(" "),t("p",[v._v("备忘录模式")]),v._v(" "),t("p",[v._v("观察者模式")]),v._v(" "),t("p",[v._v("状态模式")]),v._v(" "),t("p",[v._v("策略模式")]),v._v(" "),t("p",[v._v("模板模式")]),v._v(" "),t("p",[v._v("访问者模式")])])}),[],!1,null,null,null);_.default=r.exports}}]);