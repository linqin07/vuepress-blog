(window.webpackJsonp=window.webpackJsonp||[]).push([[273],{496:function(n,e,t){"use strict";t.r(e);var i=t(2),s=Object(i.a)({},(function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("h3",{attrs:{id:"基于注解的事件处理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#基于注解的事件处理","aria-hidden":"true"}},[n._v("#")]),n._v(" 基于注解的事件处理")]),n._v(" "),t("p",[t("a",{attrs:{href:"https://mp.weixin.qq.com/s?__biz=MzU1Nzg4NjgyMw==&mid=2247506199&idx=1&sn=457912818af109f0d6f9d707fb5bcd48&chksm=fc2c651fcb5bec09a02ad5078936aa648552a07d1cd4d1878c9b14278085310b81ae7324ee22&mpshare=1&scene=1&srcid=0221dR8p9d8fpZLDoj5WdO8l&sharer_sharetime=1676941660839&sharer_shareid=476025378068f9bef6b9eae015ba622a#rd",target:"_blank",rel:"noopener noreferrer"}},[n._v("原文"),t("OutboundLink")],1)]),n._v(" "),t("blockquote",[t("p",[n._v("Spring 提供 @EventListener 和 @TransactionListener 两个注解以简化对事件的处理。")])]),n._v(" "),t("h4",{attrs:{id:"_2-2-1-eventlistener"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-1-eventlistener","aria-hidden":"true"}},[n._v("#")]),n._v(" 2.2.1. @EventListener")]),n._v(" "),t("p",[n._v("Spring 的 EventListener 监听器是一种相对于传统的事件监听方式更为简洁和灵活的事件机制。与传统的事件机制不同，EventListener 不需要显示地继承特定的事件接口，而是使用注解标识需要监听的事件类型，然后通过一个单独的监听器类处理所有类型的事件。")]),n._v(" "),t("p",[n._v("相比之下 EventListener 的优势主要有以下几点：")]),n._v(" "),t("ol",[t("li",[n._v("更加灵活：EventListener 不依赖于任何特定的事件接口，从而使得事件处理更加灵活，可以监听和处理任意类型的事件。")]),n._v(" "),t("li",[n._v("更加简洁：相比传统的事件监听方式，使用 EventListener 可以避免一系列繁琐的接口定义和实现，简化了代码结构，使得开发效率更高。")]),n._v(" "),t("li",[n._v("更加松耦合：EventListener 将事件发布方和事件处理方分离，遵循松耦合的设计原则，提高了代码的可维护性和扩展性。")]),n._v(" "),t("li",[n._v("更加可测试：由于 EventListener 可以监听和处理任意类型的事件，可以通过单元测试验证其功能是否正确，从而提高了测试的可靠性。")])]),n._v(" "),t("p",[n._v("以下是一个简单的例子：")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('@Component\npublic class MyEventListener{\n\n    @EventListener\n    public void onApplicationEvent(MyEvent event) {\n        // 处理事件\n        System.out.println("Received event: " + event.getMessage());\n    }\n}\n\npublic class MyEvent {\n    private String message;\n\n    public MyEvent(String message) {\n        this.message = message;\n    }\n\n    public String getMessage() {\n        return message;\n    }\n}\n\n@Component\npublic class MyEventPublisher {\n\n    @Autowired\n    private ApplicationEventPublisher eventPublisher;\n\n    public void publishEvent(String message) {\n        MyEvent event = new MyEvent(message);\n        eventPublisher.publishEvent(event);\n    }\n}\n')])])]),t("p",[n._v("相比基于接口的事件处理，EventListener 是一种更加简洁、灵活、松耦合、可测试的事件机制，能够有效地降低开发的复杂度，提高开发效率。")]),n._v(" "),t("h4",{attrs:{id:"_2-2-2-transactioneventlistener"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-2-transactioneventlistener","aria-hidden":"true"}},[n._v("#")]),n._v(" 2.2.2. @TransactionEventListener")]),n._v(" "),t("p",[n._v("在 Spring 中，TransactionEventListner 和 EventListner 都是用于处理事件的接口。不同之处在于")]),n._v(" "),t("ol",[t("li",[n._v("TransactionEventListner 是在事务提交后才会触发")]),n._v(" "),t("li",[n._v("而 EventListner 则是在事件发布后就会触发。")])]),n._v(" "),t("p",[n._v("具体来说，在使用 Spring 的声明式事务时，可以在事务提交后触发某些事件。这就是 TransactionEventListner 的应用场景。而 EventListner 则不涉及事务，可以用于在事件发布后触发一些操作。")]),n._v(" "),t("p",[n._v("下面是一个简单的示例，演示了如何使用 TransactionEventListner 和 EventListner：")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("@Component\npublic class MyEventListener {\n\n    @EventListener\n    public void handleMyEvent(MyEvent event) {\n        // 处理 MyEvent\n    }\n\n    @TransactionalEventListener\n    public void handleMyTransactionalEvent(MyTransactionalEvent event) {\n        // 处理 MyTransactionalEvent\n    }\n}\n\n@Service\npublic class MyService {\n\n    @Autowired\n    private ApplicationEventPublisher eventPublisher;\n\n    @Autowired\n    private MyRepository myRepository;\n\n    @Transactional\n    public void doSomething() {\n        // 做一些事情\n        MyEntity entity = myRepository.findById(1L);\n        // 发布事件\n        eventPublisher.publishEvent(new MyEvent(this, entity));\n        // 发布事务事件\n        eventPublisher.publishEvent(new MyTransactionalEvent(this, entity));\n    }\n}\n")])])]),t("p",[n._v("在这个例子中，MyEventListener 类定义了两个方法，handleMyEvent 和 handleMyTransactionalEvent，分别处理 MyEvent 和 MyTransactionalEvent 事件。其中，handleMyTransactionalEvent 方法用 @TransactionalEventListener 注解标记，表示它只会在事务提交后触发。")]),n._v(" "),t("p",[n._v("MyService 类中的 doSomething 方法使用 ApplicationEventPublisher 来发布事件。注意，它发布了两种不同类型的事件：MyEvent 和 MyTransactionalEvent。这两个事件会分别触发 MyEventListener 中的对应方法。")]),n._v(" "),t("p",[n._v("总的来说，Spring 的事件机制非常灵活，可以方便地扩展应用程序的功能。TransactionEventListner 和 EventListner 这两个接口的应用场景有所不同，可以根据实际需求选择使用。")])])}),[],!1,null,null,null);e.default=s.exports}}]);